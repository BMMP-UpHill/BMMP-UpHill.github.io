{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "//Game\r\n// Imports\r\nconst GameState = require('States').GameState;\r\nconst PlayerMovementState = require('States').PlayerMovementState;\r\nconst Step = require('Types').BlockType;\r\n\r\nvar whichStep = Step.None;\r\nvar updateAccess = true;\r\nvar onSteppKills = false;\r\nvar killActionExecuted = false;\r\nvar pressDouble = 0;\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        state: {\r\n            default: GameState.None,\r\n            type: GameState\r\n        },\r\n        // Game Data/Objects\r\n        gamefield: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n\r\n        player: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n\r\n        // Game-UI\r\n        scoreLabel: {\r\n            default: null,\r\n            type: cc.Label,\r\n        },\r\n\r\n        multiplierLabel: {\r\n            default: null,\r\n            type: cc.Label,\r\n        },\r\n\r\n        // Music Theme\r\n        /*themeurl: {\r\n            default: null,\r\n            type: cc.url,\r\n        },*/\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        //this.setFrameRate(60);\r\n        this.state = GameState.Waiting;\r\n        //this.GameState = GameState;\r\n        this.initalizeInputControl(); // Activate input handling\r\n\r\n        cc.audioEngine.playMusic(\"..\\audio\\music\\theme\", true);\r\n\r\n        this.score = 0;\r\n        this.scoreMultiplier = 1;\r\n        this.multiplierActive = false;\r\n\r\n        this.steppedBlock = null;\r\n    },\r\n\r\n    reset: function(){\r\n\r\n    },\r\n\r\n    // Called when player onLoad() has finished\r\n    onPlayerLoadCallback: function(){\r\n        this.gamefield.player = this.player;\r\n\r\n        // Player is assembled. set all needed graphical information\r\n        this.player.node.setPosition(this.gamefield.getStartPosition());\r\n        this.player.node.setLocalZOrder(1000);\r\n        this.player.dx = this.gamefield.disTX/2; //only half the distance on x!!\r\n        this.player.dy = this.gamefield.disTY;\r\n\r\n    },\r\n\r\n    // Called when gamefield is initalized ( onLoad() has finished )\r\n    onGameFieldLoadCallback: function(){\r\n\r\n    },\r\n\r\n    //TODO hier wird ein Fehler verursacht, wenn Gift NACH einem Switcher kommt!\r\n    validateMove: function(dir){\r\n\r\n        if(this.state === GameState.GameOver){\r\n           //console.log('Du darfst nicht bewegen, weil du gameOver bist');\r\n            return false;\r\n        }\r\n\r\n        if(this.player.movestate === PlayerMovementState.Jumping ||\r\n            this.player.movestate === PlayerMovementState.Falling){ //Player already jumping/falling -> neglect input\r\n            return false;\r\n        }\r\n        //var currentfield = this.player.oldDest;\r\n        //console.log('BlockType: ', this.gamefield.getBlockType(this.gamefield.getJumpField(dir)));\r\n        //console.log('var destfield = ', destfield);\r\n\r\n         //steppedBlock is necessarry for Movement-collisioncontroll\r\n        if (this.player.isSwaped) {\r\n            dir = -dir;\r\n            this.player.isSwaped = false;\r\n        }\r\n\r\n        this.destfield = this.gamefield.getJumpField(dir);\r\n        //console.log('destfield = ', this.destfield);\r\n        //console.log('destfield = ', this.destfield.name);\r\n        var steppedBlock = this.destfield.getComponent(this.destfield.name);\r\n\r\n         if(steppedBlock.isBlocked){\r\n             return false;\r\n         }\r\n\r\n        // !!! INSERT lines at end of file when bugs happen here !!!\r\n\r\n        //\r\n        //Move was correct.\r\n        //\r\n        //Change player direction\r\n        this.player.dir = dir;\r\n        this.incrementScore(1);\r\n        this.scoreLabel.string = this.score.toString();\r\n\r\n        return true;\r\n    },\r\n\r\n\r\n    initalizeInputControl: function () {\r\n\r\n        var self = this;\r\n\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n\r\n            onKeyPressed: function(keyCode, event) {\r\n                if(self.state == GameState.Paused) return;\r\n                switch (keyCode) {\r\n                    case cc.KEY.a:\r\n                        if (self.state === GameState.Waiting)\r\n                            self.state = GameState.Playing;\r\n\r\n                        if (self.validateMove(1)) {\r\n\r\n                            console.log('pressDouble: ', pressDouble);\r\n                            if (pressDouble == 1) {\r\n                                console.log('NOCHMAL');\r\n                                pressDouble = 0;\r\n                                break;\r\n                            }\r\n                            self.player.move(self.destfield, self);\r\n                            self.gamefield.updatePlayerArrayPos(); // Change array position after jump or bugs will spawn\r\n                            self.player.oldDest.getComponent(self.player.oldDest.name).playerOnTop = false;\r\n\r\n                        }\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        if (self.state === GameState.Waiting)\r\n                            self.state = GameState.Playing;\r\n\r\n                        if (self.validateMove(-1)) {\r\n\r\n\r\n                            console.log('pressDouble: ', pressDouble);\r\n                            if (pressDouble == 1) {\r\n                                console.log('NOCHMAL');\r\n                                pressDouble = 0;\r\n                                break;\r\n                            }\r\n\r\n                            self.player.move(self.destfield, self);\r\n                            self.gamefield.updatePlayerArrayPos();\r\n                            self.player.oldDest.getComponent(self.player.oldDest.name).playerOnTop = false; //TODO vll in player?\r\n                        }\r\n                        break;\r\n                    case cc.KEY.u:\r\n                        self.gamefield.updateField(-10);\r\n                        break;\r\n                    case cc.KEY.k:\r\n                        self.player.kill();\r\n                        break;\r\n                    case cc.KEY.escape:\r\n                        cc.log(\"Escape pressed\");\r\n                        // TODO: what to do on escaped-pressed?\r\n                        break;\r\n                    case cc.KEY.f:\r\n                        self.player.fall();\r\n                        break;\r\n                }\r\n            },\r\n\r\n            onKeyReleased: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n\r\n                        break;\r\n                    case cc.KEY.d:\r\n\r\n                        break;\r\n                }\r\n            }\r\n        }, self.node);\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        //console.log('M: update');\r\n        if(this.state === GameState.Playing){\r\n            this.moveFieldWithPlayer();\r\n        }\r\n        if(this.state === GameState.GameOver){\r\n            cc.director.loadScene('GameOverScene');\r\n        }\r\n    },\r\n\r\n    moveFieldWithPlayer: function () {\r\n        var ySpeed = this.player.arrayPosY;\r\n        // cc.log('Playerpos', ySpeed);\r\n        if(updateAccess){\r\n            //cc.log('UPDATE-Cases betreten');\r\n            updateAccess = false;\r\n            switch (ySpeed) {\r\n                case 8:\r\n                    updateAccess = this.gamefield.updateField(-0.3);\r\n                    break;\r\n                case 7:\r\n                    updateAccess = this.gamefield.updateField(-0.4);\r\n                    break;\r\n                case 6:\r\n                    updateAccess = this.gamefield.updateField(-1);\r\n                    break;\r\n                case 5:\r\n                    updateAccess = this.gamefield.updateField(-1.5);\r\n                    break;\r\n                case 4:\r\n                    updateAccess = this.gamefield.updateField(-2);\r\n                    break;\r\n                case 3:\r\n                    updateAccess = this.gamefield.updateField(-4);\r\n                    break;\r\n                case 2:\r\n                    updateAccess = this.gamefield.updateField(-8);\r\n                    break;\r\n                case 1:\r\n                    updateAccess =  this.gamefield.updateField(-12);\r\n                    break;\r\n                case 0:\r\n                    updateAccess = this.gamefield.updateField(-20);\r\n                    break;\r\n                default:\r\n                    updateAccess = this.gamefield.updateField(-0.3);\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //\r\n    // HELPING METHODS. SMALL STUFF\r\n    //\r\n\r\n    changeMultiplier: function(value){\r\n        //TODO: Stop and start action by tag\r\n        this.scoreMultiplier = value;\r\n        this.multiplierLabel.string = \"Multiplier: \"+this.scoreMultiplier;\r\n        this.multiplierLabel.node.opacity = 255;\r\n        var resetMultiplierCallback = cc.callFunc(this.resetMultiplier, this);\r\n        this.multiplierLabel.node.runAction(cc.sequence(cc.fadeOut(5), resetMultiplierCallback));\r\n    },\r\n\r\n    resetMultiplier: function(){\r\n        this.scoreMultiplier = 0;\r\n    },\r\n\r\n    incrementScore: function(inc){\r\n        this.score += inc*this.scoreMultiplier;\r\n    },\r\n\r\n\r\n\r\n    //Deprecated\r\n    checkItemCollision: function(item){\r\n        var itempos = item.node.getPosition();\r\n        var ppos = this.player.node.getPosition();\r\n        var dist = cc.pDistance(itempos, ppos);\r\n        if(dist < item.collectRadius){\r\n            item.onPickUpCallback(this.player);\r\n        }\r\n    },\r\n\r\n        /*switch(destfield){\r\n            case 'Grass':\r\n                //console.log('case Grass');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Grass').isBlocked){\r\n                    ret = true;\r\n                }\r\n                //steppedBlock is necessarry for Collisioncontroll\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Grass');\r\n                whichStep = Step.Grass;\r\n                break;\r\n            case 'Dirt':\r\n                //console.log('case dirt');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Dirt').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Dirt');\r\n                whichStep = Step.Dirt;\r\n                break;\r\n            case 'Trapdoor':\r\n                //console.log('case Trapdoor');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Trapdoor').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Trapdoor');\r\n                whichStep = Step.Trapdoor;\r\n                break;\r\n            case 'Empty':\r\n                //console.log('case Empty');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Empty').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Empty');\r\n                whichStep = Step.Empty;\r\n                break;\r\n            case 'Water_Border':\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Empty').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Empty');\r\n                whichStep = Step.Empty;\r\n                break;\r\n            case 'Poison':\r\n                //console.log('case Poison');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Poison').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Poison');\r\n                whichStep = Step.Poison;\r\n                break;\r\n            case 'Switcher':\r\n                //console.log('case Switcher');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Switcher').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Switcher');\r\n                whichStep = Step.Switcher;\r\n                break;\r\n            case 'Spike':\r\n                //console.log('case Spike');\r\n                if(!this.gamefield.getJumpField(dir).getComponent('Spike').isBlocked){\r\n                    ret = true;\r\n                }\r\n                this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Spike');\r\n                whichStep = Step.Spike;\r\n                //console.log('steppedBlock auf Spike gesetzt');\r\n                //console.log(this.steppedBlock);\r\n                break;\r\n            default:\r\n                ret = true;\r\n                break;\r\n        }*/\r\n\r\n        /*var destfield = this.gamefield.getJumpField(dir); // Field player wants to jump at\r\n         console.log('M: validatemMove');\r\n         console.log('BlockType = ', this.gamefield.getBlockType(this.gamefield.getJumpField(dir)));\r\n         this.steppedBlock = destfield.getComponent('Block');\r\n         if(this.steppedBlock !== null){\r\n         if(this.steppedBlock.isBlocked){    // Block is...blocked\r\n         return false;\r\n         }\r\n         }*/\r\n});\r\n"
  ]
}