{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "const cloudsprites = 7; //How many cloud sprites we have in the atlas\r\n\r\nconst cloudspawnYmin = 140; //\r\nconst cloudspawnYmax = 360; //\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        cloudsAmount: 0,\r\n        cloudsSpeedVariance: 0,\r\n\r\n        background: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },\r\n\r\n        cloudsatlas: {\r\n            default: null,\r\n            type: cc.SpriteAtlas,\r\n        },\r\n    },\r\n\r\n\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        this.clouds = [];\r\n        this.speeds = [];\r\n        this.initalizeClouds();\r\n    },\r\n\r\n    initalizeClouds: function () {\r\n        for (var i = 0; i < this.cloudsAmount; i++) {\r\n            this.generateCloud(i);\r\n        }\r\n    },\r\n\r\n    //Returns a cloud node as Sprite from a SpriteFrame\r\n    generateCloud: function(id){\r\n        var rndm = this.randomInRangeInclusive(1, this.cloudsprites);\r\n        var cloudsprite = this.cloudsatlas.getSpriteFrame(this.getCloudRandomSprite(rndm));\r\n\r\n        var x = this.randomInRangeInclusive(-700, -800);\r\n        var y = this.randomInRangeInclusive(cloudspawnYmin, cloudspawnYmax);\r\n        var node = new cc.Node(\"New CloudSprite\");\r\n        node.addComponent(cc.Sprite);\r\n        node.getComponent(cc.Sprite).spriteFrame = cloudsprite;\r\n        node.setPosition(cc.p(x, y));\r\n\r\n        this.clouds[id] = node;\r\n        this.speeds[id] = this.randomInRangeInclusive(1, this.cloudsSpeedVariance);\r\n        \r\n        this.background.addChild(node);\r\n    },\r\n\r\n    updateCloud: function (cloudId, dt) {\r\n        var cloud = this.clouds[cloudId];\r\n        var speed = this.speeds[cloudId];\r\n        var x = cloud.getPositionX();\r\n\r\n        if(x > 550){ //canvas.width+cloud.getContentSize().width //Cloud is outside the frame\r\n            cloud.destroy(); //destroy this cloud ..\r\n            this.generateCloud(cloudId); //and create a new one\r\n        }\r\n\r\n        var y = cloud.getPositionY();\r\n        cloud.setPosition(cc.p(x+speed * 2*dt, y));\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    update: function (dt) {\r\n        for (var i = 0; i < this.clouds.length; i++) {\r\n            this.updateCloud(i, dt);\r\n        }\r\n    },\r\n\r\n\r\n    //\r\n    // Helping functions\r\n    //\r\n    getCloudRandomSprite: function (int) {\r\n        switch (int) {\r\n            case 0: return \"cloud_01\";\r\n            case 1: return \"cloud_02\";\r\n            case 2: return \"cloud_03\";\r\n            case 3: return \"cloud_04\";\r\n            case 4: return \"cloud_05\";\r\n            case 5: return \"cloud_06\";\r\n            case 6: return \"cloud_07\";\r\n            default: return \"cloud_01\";\r\n        }\r\n    },\r\n\r\n    randomInRangeInclusive: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    },\r\n});\r\n"
  ]
}