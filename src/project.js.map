{"version":3,"sources":["resources/app.asar/node_modules/browser-pack/_prelude.js","scripts/gamefield/Block.js","project.js","scripts/scenescripts/CloudAnimation.js","scripts/gamefield/blocks/Dirt.js","scripts/gamefield/blocks/Empty.js","scripts/scenescripts/GameButtonCallbacks.js","scripts/gamefield/GameField.js","scripts/Game.js","scripts/gamefield/blocks/Grass.js","scripts/gameobjects/Item.js","scripts/gamefield/Level.js","scripts/scenescripts/MenuButtonCallbacks.js","scripts/gameobjects/Player.js","scripts/gamefield/blocks/Poison.js","scripts/gamefield/blocks/Spike.js","scripts/enums/States.js","scripts/gamefield/blocks/Switcher.js","scripts/gamefield/blocks/Trapdoor.js","scripts/enums/Types.js","scripts/gamefield/blocks/WaterRight.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length","Block","module","cc","_RFpush","BlockType","PlayerMovementState","Class","extends","Component","properties","isBlocked","hasItem","blocktype","default","None","type","item","Node","onLoad","onStepCallback","player","this","Empty","fall","node","runAction","assembleBlockAction","moveTo","getPosition","Trapdor","p","getPositionX","getPositionY","deform","destroy","setBlocked","bool","_RFpop","States","Types","CloudAnimation","Dirt","playerOnTop","game","log","collide","GameButtonCallbacks","GameState","pauseOverlay","scoreLabel","Label","buttonAudio","url","AudioClip","score","sys","localStorage","getItem","console","string","toString","paused","pauseControlCallback","opacity","director","resume","state","Playing","pause","Paused","audioEngine","playEffect","againControlCallback","loadScene","backControlCallback","Ended","GameField","Level","ItemType","startX","startY","distX","distY","spawnOffSetY","despawnOffSetY","ySpawnPosition","startField","pufferField","startFieldItems","pufferFieldItems","nextFirstLine","nextFirstLineItem","newCube","gridSizeX","gridSizeY","despawnHeight","Prefab","Grass","Trapdoor","Switcher","Poison","Spike","WaterC","AntidoteL","AntidoteR","CoinL","CoinR","StarL","StarR","BlockedBush","BlockedStone","SlowDownBottom","SlowDownTop","WaterRight","getComponent","gamefield","count","gameField","items","disTX","disTY","resetArrays","initializeField","onGameFieldLoadCallback","y","x","spawnCube","updateField","speed","posX","posY","setPosition","updatePlayer","destroyLine","rearrangeGameField","updatePlayerArrayPos","arrayPosY","dir","arrayPosX","getStartPosition","mid","Math","round","Number","oldDest","startpos","offsetY","getJumpField","line","destroyBlock","block","easing","easeCubicActionIn","fade","fadeOut","sequence","spawn","callFunc","destroyBlockData","returnA","createFirstLine","addZOrderToGameField","GameOver","array","getNextLineFromPuffer","arrayItems","getNextLineFromItemPuffer","rise","fadeIn","cubeNumber","itemNumber","instantiate","spawnItem","sprite","name","addChild","parentBlock","blockName","newItem","itemtype","Antidote","Coin","Star","Blocker","Slower","newItem2","floatAboveCube","rightOnTopOfCube","includes","ret","defineNextRandomArray","testArray","L33C","L33I","rand","random","L11C","L11I","L12C","L12I","L13C","L13I","L21C","L21I","L22C","L22I","L23C","L23I","L31C","L31I","L32C","L32I","setLocalZOrder","getBlockType","callPrefab","pref","Game","Step","updateAccess","__ccTexture2D_handleLoadedTexture","Texture2D","prototype","handleLoadedTexture","apply","arguments","setAliasTexParameters","pressCount","multiplierLabel","themeurl","storage","Waiting","initalizeInputControl","playMusic","setItem","scoreMultiplier","multiplierActive","steppedBlock","reset","onPlayerLoadCallback","dx","dy","validateMove","movestate","Jumping","Falling","isSwaped","isSlowed","destfield","incrementScore","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","move","undefined","d","k","kill","escape","onKeyReleased","update","dt","moveFieldWithPlayer","ySpeed","changeMultiplier","value","resetMultiplierCallback","resetMultiplier","inc","checkItemCollision","itempos","ppos","dist","pDistance","collectRadius","onPickUpCallback","Item","ItemState","ItemActivityState","riseY","itemstate","Pickable","activitystate","Idle","itemValue","itemTimer","activationsound","destroyItem","Picked","Active","isPoisoned","poisonTmp","poisonTimer","isInvincible","pickedCallback","picked","soundcallback","playSound","assemblePickUpAction","risePoint","getItemAnimationTime","anim","moveBy","Expired","MenuButtonCallbacks","startControlCallback","onLaunched","aboutControlCallback","tutorialControlCallback","quitControlCallback","Player","explodetime","PlayerState","riseDeathY","Standing","isAlive","invincibiltyTimer","jumpTime","fallTime","playeratlas","SpriteAtlas","jumpAudio","deathAudio","fallAudio","drinkAudio","poisonedAudio","invincibiltyTmp","isMoving","getContentSize","height","destinationpos","gamestatecallback","changeGameState","assembleAction","stopAllEffects","killcallback","changeGameFallState","changePlayerState","blockStepped","gAme","getComponentInChildren","soundCallback","playerstateCallback","blockstepCallback","switchPlayerAppearance","setDestinationPos","updated","updateAnimation","Sprite","spriteFrame","getSpriteFrame","bezier","bezierTo","scaleTo","scaletime","getLocalZOrder","fallDeform","fallfade","easeCubicActionOut","updateTimers","animation","Animation","play","getAnimation","stop","_isAlive","alreadyKilled","isDeadly","switchDeadly","hasKilled","performSpikeKill","Enum","Loading","Resumed","Blocked","Alive","Dead","Poisoned","Invincible","animCtrl"],"mappings":"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AA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAYAC,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAMAC,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAOAC,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA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","file":"project.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\ncc._RFpush(module, '0cf80va4iJCXZDXbSwgY1mm', 'Block');\n// scripts\\gamefield\\Block.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    //What happens if you step on a block\n    onStepCallback: function onStepCallback(player) {\n        // Perform the action the block produces(change player or environment)\n        switch (this.blocktype) {\n            case BlockType.Empty:\n                player.fall();\n                break;\n        }\n\n        // Perform block animation\n        this.node.runAction(this.assembleBlockAction());\n    },\n\n    // Action(Animation etc) for every block\n    assembleBlockAction: function assembleBlockAction() {\n        switch (this.blocktype) {\n            case BlockType.Empty:\n                return cc.moveTo(0, this.node.getPosition());\n\n            case BlockType.Trapdor:\n                return cc.moveTo(1, cc.p(this.node.getPositionX(), this.node.getPositionY() - 100));\n        }\n    },\n\n    // Part of animation see above\n    deform: function deform() {},\n\n    destroy: function destroy() {\n        this.node.destroy();\n    },\n\n    setBlocked: function setBlocked(bool) {\n        this.isBlocked = bool;\n    },\n\n    isBlocked: function isBlocked() {\n        return this.isBlocked;\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({\"Block\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '0cf80va4iJCXZDXbSwgY1mm', 'Block');\n// scripts\\gamefield\\Block.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    //What happens if you step on a block\n    onStepCallback: function onStepCallback(player) {\n        // Perform the action the block produces(change player or environment)\n        switch (this.blocktype) {\n            case BlockType.Empty:\n                player.fall();\n                break;\n        }\n\n        // Perform block animation\n        this.node.runAction(this.assembleBlockAction());\n    },\n\n    // Action(Animation etc) for every block\n    assembleBlockAction: function assembleBlockAction() {\n        switch (this.blocktype) {\n            case BlockType.Empty:\n                return cc.moveTo(0, this.node.getPosition());\n\n            case BlockType.Trapdor:\n                return cc.moveTo(1, cc.p(this.node.getPositionX(), this.node.getPositionY() - 100));\n        }\n    },\n\n    // Part of animation see above\n    deform: function deform() {},\n\n    destroy: function destroy() {\n        this.node.destroy();\n    },\n\n    setBlocked: function setBlocked(bool) {\n        this.isBlocked = bool;\n    },\n\n    isBlocked: function isBlocked() {\n        return this.isBlocked;\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"CloudAnimation\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '7288fjsiXFAlL+LiGenQ8Or', 'CloudAnimation');\n// scripts\\scenescripts\\CloudAnimation.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"Dirt\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'fe13c6ji91IGKAaD1cGpfSK', 'Dirt');\n// scripts\\gamefield\\blocks\\Dirt.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Dirt');\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Empty\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'beeafQj1LhHkLDEkhzDV3+0', 'Empty');\n// scripts\\gamefield\\blocks\\Empty.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        /*gamefield: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },*/\n\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        // Perform the action the block produces(change player or environment)\n        player.fall();\n    },\n\n    collide: function collide() {\n        cc.log('wir sind in der Methode');\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"GameButtonCallbacks\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '69e769081xGNbDZBmrDRLFu', 'GameButtonCallbacks');\n// scripts\\scenescripts\\GameButtonCallbacks.js\n\nvar GameState = require('States').GameState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        pauseOverlay: {\n            'default': null,\n            type: cc.Node\n        },\n\n        scoreLabel: {\n            'default': null,\n            type: cc.Label\n        },\n\n        buttonAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        game: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        /*if(game !== undefined)\r\n            this.scoreLabel.string = \"Score: \"+game.getComponent('Game').score.toString();\r\n            */\n        this.score = cc.sys.localStorage.getItem('score');\n        console.log('Score in GameButtonCallback: ', this.score);\n        if (this.scoreLabel !== null) {\n            console.log('SCORELABEL');\n            console.log(this.scoreLabel);\n            this.scoreLabel.string = \"Score: \" + this.score.toString();\n        }\n        this.paused = false; // TODO: spread this to the outer world\n    },\n\n    pauseControlCallback: function pauseControlCallback() {\n        //TODO: change pause button to different sprite\n        if (this.paused) {\n            this.pauseOverlay.opacity = 0;\n            cc.director.resume();\n            this.paused = false;\n            this.game.state = GameState.Playing;\n\n            cc.log(\"resume\");\n        } else {\n            this.pauseOverlay.opacity = 255;\n            cc.director.pause();\n            this.paused = true;\n            this.game.state = GameState.Paused;\n            cc.log(\"paused\");\n        }\n\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    againControlCallback: function againControlCallback() {\n        cc.director.loadScene('GameScene');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    backControlCallback: function backControlCallback() {\n        this.game.state = GameState.Ended;\n        cc.director.loadScene('Startmenu');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\"}],\"GameField\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'e001f+mMWNN5YhXykLdMFLZ', 'GameField');\n// scripts\\gamefield\\GameField.js\n\n//GameField\n\nvar Level = require('Level');\nvar BlockType = require('Types').BlockType;\nvar ItemType = require('Types').ItemType;\nvar GameState = require('States').GameState;\n\nvar startX = 113;\nvar startY = 501;\n\nvar distX = 83;\nvar distY = 65;\n\nvar spawnOffSetY = 200;\nvar despawnOffSetY = -100;\nvar ySpawnPosition = 485;\n\nvar startField = [[7, 1, 2, 2, 1, 7], [7, 1, 5, 1, 2, 1, 7], [7, 2, 1, 1, 2, 7], [7, 2, 1, 1, 1, 2, 7], [7, 2, 1, 1, 2, 7], [7, 1, 2, 1, 5, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 1, 2, 1, 1, 7]\n/*[7,1,1,1,1,0],\r\n [7,1,1,1,1,1,0],\r\n [7,1,1,4,4,5],\r\n [7,1,1,1,5,1,0],\r\n [7,1,1,1,1,0],\r\n [7,5,6,3,1,1,0],\r\n [7,1,1,5,1,0],\r\n [7,1,1,1,1,1,0],*/\n];\n\n//Array for each individual block\nvar pufferField = [[7, 1, 6, 6, 6, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 3, 1, 3, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 2, 1, 2, 1, 7], [7, 3, 2, 2, 3, 7], [7, 7, 1, 1, 1, 7, 7], [7, 1, 1, 4, 4, 7], [7, 4, 1, 4, 1, 4, 7], [7, 4, 1, 1, 1, 7], [7, 4, 1, 1, 1, 1, 7], [7, 5, 1, 5, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 6, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n/*\r\n The items-array has the same dimensions as the startField. Each item will be a child of the corresponding block (seen as a layover).\r\n // 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\r\n // 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\r\n //TODO: 10.WaterLeft, 11.WaterRight */\nvar startFieldItems = [[0, 8, 0, 0, 8, 0], [0, 8, 0, 7, 0, 8, 0], [0, 0, 7, 7, 2, 0], [0, 6, 7, 7, 7, 0, 0], [0, 0, 7, 7, 0, 0], [0, 7, 4, 7, 0, 7, 0], [0, 7, 0, 0, 7, 0], [0, 8, 8, 0, 8, 8, 0]];\n\n/*\r\n The items-array has the same dimensions as the pufferField. Each item will be a child of the corresponding block (seen as a layover).\r\n // 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\r\n // 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\r\n //TODO: 10.WaterLeft, 11.WaterRight */\nvar pufferFieldItems = [[0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 0], [0, 0, 9, 7, 9, 0, 0], [0, 9, 7, 0, 0, 0], [0, 0, 7, 0, 7, 0, 0], [0, 0, 7, 9, 9, 0], [0, 0, 7, 7, 0, 7, 0], [0, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 7, 0, 0], [0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0]];\n\nvar nextFirstLine = 0;\nvar nextFirstLineItem = 0;\n\nvar newCube = null;\nvar newItem = null;\n\ncc.Class({\n\t'extends': cc.Component,\n\n\tproperties: {\n\t\tgridSizeX: 0, // Rows - dont change here but in cocos creator!!\n\t\tgridSizeY: 0, // Columns\n\n\t\tdespawnHeight: 0,\n\n\t\titem: {\n\t\t\t'default': null,\n\t\t\ttype: cc.Node\n\t\t},\n\n\t\t//Blocks start here\n\t\tEmpty: { //0\t\tEMPTY\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tGrass: { //1\t\tGRASS\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tDirt: { //2\t\tDIRT\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tTrapdoor: { //3\t\tTRAPDOOR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSwitcher: { //4\t\tSWITCHER\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tPoison: { //5\t\tPOISON\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSpike: { //6\t\tSPIKE\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tWaterC: { //7\t\tWATER (Like EMPTY)\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\n\t\t// Game reference to pass field\n\t\tgame: {\n\t\t\t'default': null,\n\t\t\ttype: cc.Node\n\t\t},\n\n\t\t//Items start here\n\t\t// 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\n\t\t// 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\n\t\t//TODO: 10.WaterLeft, 11.WaterRight\n\t\tAntidoteL: { //1\t\tAntidoteL\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tAntidoteR: { //2\t\tAntidoteR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tCoinL: { //3\t\tCoinL\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tCoinR: { //4\t\tCoinR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tStarL: { //5\t\tStarL\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tStarR: { //6\t\tStarR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\n\t\tBlockedBush: { //7\t\tBlockedBush\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tBlockedStone: { //8\t\tBlockedStone\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSlowDownBottom: { //9\t\tSlowDownBottom (Bottom and Top are always together)\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSlowDownTop: { //9\t\tSlowDownTop (Bottom and Top are always together)\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\t/*\r\n   WaterLeft: {\t\t\t\t\t\t//10\t\tWaterLeft\r\n   default: null,\r\n   type: cc.Prefab,\r\n   },*/\n\t\tWaterRight: { //11\t\tWaterRight\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t}\n\n\t},\n\n\t//Player\n\t// use this for initialization\n\tonLoad: function onLoad() {\n\t\t//register gamefield at game for processing gamefield logic\n\t\tthis.game.getComponent('Game').gamefield = this;\n\n\t\tthis.player = null; // load later when player ran onLoad()\n\t\tthis.count = 0;\n\t\tthis.gameField = [];\n\t\tthis.items = [];\n\n\t\tthis.disTX = distX;\n\t\tthis.disTY = distY;\n\t\tthis.resetArrays();\n\t\tthis.initializeField();\n\n\t\tthis.game.getComponent('Game').onGameFieldLoadCallback();\n\t},\n\n\tresetArrays: function resetArrays() {\n\t\tnextFirstLine = 0;\n\t\tnextFirstLineItem = 0;\n\t\tpufferField = [[7, 1, 6, 6, 6, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 3, 1, 3, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 2, 1, 2, 1, 7], [7, 3, 2, 2, 3, 7], [7, 7, 1, 1, 1, 7, 7], [7, 1, 1, 4, 4, 7], [7, 4, 1, 4, 1, 4, 7], [7, 4, 1, 1, 1, 7], [7, 4, 1, 1, 1, 1, 7], [7, 5, 1, 5, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 6, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n\t\tpufferFieldItems = [[0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 0], [0, 0, 9, 7, 9, 0, 0], [0, 9, 7, 0, 0, 0], [0, 0, 7, 0, 7, 0, 0], [0, 0, 7, 9, 9, 0], [0, 0, 7, 7, 0, 7, 0], [0, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 7, 0, 0], [0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0]];\n\t},\n\n\tinitializeField: function initializeField() {\n\n\t\tfor (var y = 0; y < startField.length; y++) {\n\t\t\tthis.gameField[y] = [];\n\t\t\tfor (var x = 0; x < startField[y].length; x++) {\n\t\t\t\tif (startField[y].length % 2 === 0) {\n\t\t\t\t\tnewCube = this.spawnCube(startX + x * distX, startY - distY * y, startField[y][x], startFieldItems[y][x]);\n\t\t\t\t} else {\n\t\t\t\t\tnewCube = this.spawnCube(startX + x * distX - distX / 2, startY - distY * y, startField[y][x], startFieldItems[y][x]);\n\t\t\t\t}\n\t\t\t\t//cc.log('Adding new cube: ');\n\t\t\t\t//cc.log(newCube);\n\t\t\t\tthis.gameField[y][x] = newCube;\n\t\t\t}\n\t\t}\n\t},\n\n\t/* Displaces the entire gamefield by *Speed*-Pixel\r\n  * In case border is crossed -> delete lowest row */\n\tupdateField: function updateField(speed) {\n\t\tfor (var y = 0; y < this.gameField.length; y++) {\n\t\t\tfor (var x = 0; x < this.gameField[y].length; x++) {\n\t\t\t\tvar posX = this.gameField[y][x].getPositionX();\n\t\t\t\tvar posY = this.gameField[y][x].getPositionY();\n\t\t\t\tthis.gameField[y][x].setPosition(posX, posY + speed);\n\t\t\t}\n\t\t}\n\t\tthis.updatePlayer(speed);\n\t\t/*var fieldx =  this.node.getPositionX(); //BUGGY\r\n  var fieldy = this.node.getPositionY();\r\n  this.node.setPosition(fieldx, fieldy+speed); */\n\t\t//WENN GRENZE UEBERSCHRITTEN; DANN WIRD ZEILE GELÖSCHT\n\t\tif (this.gameField[this.gameField.length - 1][0].getPositionY() <= this.despawnHeight) {\n\t\t\tcc.log('WIR SIND ZU WEIT!');\n\t\t\tthis.destroyLine(this.gameField.length - 1);\n\t\t\tthis.rearrangeGameField();\n\t\t}\n\t\treturn true;\n\t},\n\n\tupdatePlayer: function updatePlayer(speed) {\n\t\tvar x = this.player.node.getPositionX();\n\t\tvar y = this.player.node.getPositionY();\n\t\tthis.player.node.setPosition(x, y + speed);\n\t},\n\n\tupdatePlayerArrayPos: function updatePlayerArrayPos() {\n\n\t\tif (this.gameField[this.player.arrayPosY].length % 2 == 0) {\n\t\t\tif (this.player.dir < 0) {\n\t\t\t\tthis.player.arrayPosX = this.player.arrayPosX + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.player.dir > 0) {\n\t\t\t\tthis.player.arrayPosX = this.player.arrayPosX - 1;\n\t\t\t}\n\t\t}\n\n\t\tthis.player.arrayPosY = this.player.arrayPosY - 1;\n\t},\n\n\tgetStartPosition: function getStartPosition() {\n\t\tvar mid = Math.round(Number(this.gameField[this.gameField.length - 1].length / 2)) - 1;\n\t\tvar startField = this.gameField[this.gameField.length - 1][mid];\n\t\t//TODO: move this more suitable\n\t\tthis.player.arrayPosX = mid;\n\t\tthis.player.arrayPosY = this.gameField.length - 1;\n\t\tthis.player.oldDest = startField;\n\t\tvar startpos = cc.p(startField.getPositionX(), startField.getPositionY() + this.player.offsetY);\n\t\treturn startpos;\n\t},\n\n\tgetJumpField: function getJumpField(dir) {\n\t\tif (this.gameField[this.player.arrayPosY].length % 2 == 0) {\n\t\t\tif (dir > 0) {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX];\n\t\t\t} else {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX + 1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (dir > 0) {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX - 1];\n\t\t\t} else {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX];\n\t\t\t}\n\t\t}\n\t},\n\n\t//TODO: destroy items on that line\n\tdestroyLine: function destroyLine(line) {\n\t\tfor (var i = 0; i < this.gameField[line].length; i++) {\n\t\t\t//this.gameField[line][i].destroy();\n\t\t\tthis.destroyBlock(this.gameField[line][i]);\n\t\t}\n\t},\n\n\tdestroyBlock: function destroyBlock(block) {\n\t\tvar fall = cc.moveTo(1, cc.p(block.getPosition().x, despawnOffSetY)).easing(cc.easeCubicActionIn());\n\t\tvar fade = cc.fadeOut(1.5);\n\t\tblock.runAction(cc.sequence(cc.spawn(fall, fade), cc.callFunc(this.destroyBlockData, this)));\n\t},\n\n\tdestroyBlockData: function destroyBlockData(block) {\n\t\tblock.destroy();\n\t},\n\n\trearrangeGameField: function rearrangeGameField() {\n\t\t//cc.log('M: rearrangeGameField')\n\t\tvar returnA = [];\n\t\tvar x = this.gameField[1][0].getPositionX();\n\t\treturnA[0] = this.createFirstLine(x);\n\t\tfor (var i = 0; i < this.gameField.length - 1; i++) {\n\t\t\treturnA[i + 1] = this.gameField[i];\n\t\t}\n\t\tthis.gameField = returnA;\n\t\tthis.addZOrderToGameField();\n\t\tthis.player.arrayPosY = this.player.arrayPosY + 1;\n\t\tif (this.player.arrayPosY >= this.gameField.length) {\n\t\t\tconsole.log('M: rearrange kills player');\n\t\t\tthis.player.fall();\n\t\t\tthis.game.getComponent('Game').state = GameState.GameOver;\n\t\t}\n\t},\n\n\tcreateFirstLine: function createFirstLine(x) {\n\t\tcc.log('M: createFirstLine');\n\t\tvar returnA = [];\n\t\t//next line from block-puffer\n\t\tvar array = this.getNextLineFromPuffer();\n\t\t//next line from item-puffer\n\t\tvar arrayItems = this.getNextLineFromItemPuffer();\n\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tif (array.length % 2 == 0) {\n\n\t\t\t\treturnA[i] = this.spawnCube(x + i * distX, ySpawnPosition + distY - spawnOffSetY, array[i], arrayItems[i]);\n\t\t\t\treturnA[i].opacity = 0;\n\t\t\t\tvar rise = cc.moveTo(1, cc.p(returnA[i].getPosition().x, ySpawnPosition + distY)).easing(cc.easeCubicActionIn());\n\t\t\t\tvar fade = cc.fadeIn(1);\n\t\t\t\treturnA[i].runAction(cc.spawn(fade, rise));\n\t\t\t} else {\n\t\t\t\t//newCube = this.spawnBlueCube(startX+(x*distX)-(distX/2), startY-(distY*y));\n\t\t\t\t//cc.log('wir haben ein ungerades Array');\n\n\t\t\t\treturnA[i] = this.spawnCube(x + i * distX, ySpawnPosition + distY - spawnOffSetY, array[i], arrayItems[i]);\n\t\t\t\treturnA[i].opacity = 0;\n\t\t\t\tvar rise = cc.moveTo(1, cc.p(returnA[i].getPosition().x, ySpawnPosition + distY)).easing(cc.easeCubicActionIn());\n\t\t\t\tvar fade = cc.fadeIn(1);\n\t\t\t\treturnA[i].runAction(cc.spawn(fade, rise));\n\t\t\t}\n\t\t}\n\t\treturn returnA;\n\t},\n\n\t//TODO: add code to each case, so items are created as well (as of now, item-code only exists in case 1)\n\tspawnCube: function spawnCube(x, y, cubeNumber, itemNumber) {\n\t\tcc.log('M: spawnCube');\n\t\tswitch (cubeNumber) {\n\t\t\tcase 0:\n\t\t\t\t//generate a new node in the scene with a preset template\n\t\t\t\tvar newCube = cc.instantiate(this.Empty);\n\t\t\t\tnewCube.getComponent('Empty').blocktype = BlockType.Empty;\n\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tvar newCube = cc.instantiate(this.Grass);\n\t\t\t\tnewCube.getComponent('Grass').blocktype = BlockType.Grass;\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Grass');\n\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tvar newCube = cc.instantiate(this.Dirt);\n\t\t\t\tnewCube.getComponent('Dirt').blocktype = BlockType.Dirt;\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Dirt');\n\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tvar newCube = cc.instantiate(this.Trapdoor);\n\t\t\t\tnewCube.getComponent('Trapdoor').blocktype = BlockType.Trapdoor;\n\t\t\t\tnewCube.getComponent('Trapdoor').sprite = newCube;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\t//newCube = this.spawnItem(newCube, itemNumber, 'Trapdoor');\n\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tvar newCube = cc.instantiate(this.Switcher);\n\t\t\t\tnewCube.getComponent('Switcher').blocktype = BlockType.Switcher;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Switcher');\n\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tvar newCube = cc.instantiate(this.Poison);\n\t\t\t\tnewCube.getComponent('Poison').blocktype = BlockType.Poison;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Poison');\n\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tvar newCube = cc.instantiate(this.Spike);\n\t\t\t\tnewCube.getComponent('Spike').blocktype = BlockType.Spike;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Spike');\n\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tvar newCube = cc.instantiate(this.WaterC);\n\t\t\t\tnewCube.getComponent('Empty').blocktype = BlockType.Empty;\n\t\t\t\tnewCube.name = 'Empty';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar newCube = cc.instantiate(this.Grass);\n\t\t\t\tnewCube.getComponent('Grass').blocktype = BlockType.Grass;\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Grass');\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//set up a position for the \"EMPTY\"\n\t\t//newCube.setAnchorPoint(cc.p(0,0));\n\t\t//-----newCube.addChild(newItemToAdd);\n\t\tnewCube.setPosition(x, y);\n\t\t//put the newly added node under the Canvas node\n\n\t\tthis.node.addChild(newCube);\n\n\t\t//cc.log('Returning the following cube: ');\n\t\t//cc.log(newCube);\n\t\treturn newCube;\n\t},\n\n\t// 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\n\t// 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\n\t//TODO: 10.WaterLeft, 11.WaterRight\n\tspawnItem: function spawnItem(parentBlock, itemNumber, blockName) {\n\t\tswitch (itemNumber) {\n\t\t\tcase 0:\n\t\t\t\t//Empty/ no item\n\t\t\t\tvar newItem = cc.instantiate(this.Empty);\n\t\t\t\tnewItem.name = 'Empty';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t//antidoteLeft\n\t\t\t\tvar newItem = cc.instantiate(this.AntidoteL);\n\t\t\t\tnewItem.name = 'AntidoteL';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Antidote;\n\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t//antidoteRight\n\t\t\t\tvar newItem = cc.instantiate(this.AntidoteR);\n\t\t\t\tnewItem.name = 'AntidoteR';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Antidote;\n\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t//coinLeft\n\t\t\t\tvar newItem = cc.instantiate(this.CoinL);\n\t\t\t\tnewItem.name = 'CoinL';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Coin;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t//coinRight\n\t\t\t\tvar newItem = cc.instantiate(this.CoinR);\n\t\t\t\tnewItem.name = 'CoinR';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Coin;\n\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t//starLeft\n\t\t\t\tvar newItem = cc.instantiate(this.StarL);\n\t\t\t\tnewItem.name = 'starLeft';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Star;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t//starRight\n\t\t\t\tvar newItem = cc.instantiate(this.StarR);\n\t\t\t\tnewItem.name = 'starRight';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Star;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t//BlockedBush\n\t\t\t\tvar newItem = cc.instantiate(this.BlockedBush);\n\t\t\t\tnewItem.name = 'BlockedBush';\n\t\t\t\tparentBlock.getComponent(blockName).isBlocked = true;\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Blocker;\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t//BlockedStone\n\t\t\t\tvar newItem = cc.instantiate(this.BlockedStone);\n\t\t\t\tnewItem.name = 'BlockedStone';\n\t\t\t\tparentBlock.getComponent(blockName).isBlocked = true;\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Blocker;\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t//SlowDown (Top AND Bottom)\n\t\t\t\tvar newItem = cc.instantiate(this.SlowDownBottom);\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Slower;\n\t\t\t\tnewItem.name = 'SlowDownBottom';\n\n\t\t\t\tvar newItem2 = cc.instantiate(this.SlowDownTop);\n\t\t\t\tnewItem2.getComponent('Item').itemtype = ItemType.Slower;\n\t\t\t\tnewItem.addChild(newItem2);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t//Empty/ no item\n\t\t\t\tvar newItem = cc.instantiate(this.Empty);\n\t\t\t\tnewItem.name = 'Empty';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Items are in three classes:\n\t\t//1. Float above cube\n\t\t//2. Sit on top of cube\n\t\t//3. Same position as cube (no repositioning necessary)\n\t\tvar floatAboveCube = [1, 2, 3, 4, 5, 6];\n\t\tvar rightOnTopOfCube = [7, 8, 9, 10];\n\n\t\tif (floatAboveCube.includes(itemNumber)) {\n\t\t\tvar posY = newItem.getPositionY();\n\t\t\tvar posX = newItem.getPositionX();\n\t\t\tnewItem.setPosition(posX, posY + 50);\n\t\t} else if (rightOnTopOfCube.includes(itemNumber)) {\n\t\t\tvar posY = newItem.getPositionY();\n\t\t\tvar posX = newItem.getPositionX();\n\t\t\tnewItem.setPosition(posX, posY + 40);\n\t\t}\n\t\tparentBlock.getComponent(blockName).item = newItem;\n\t\tparentBlock.addChild(newItem);\n\n\t\treturn parentBlock;\n\t},\n\n\t/* Gets the next line from the block-puffer, so a new line can be created.\t*/\n\t/* Gets the next line from the block-puffer, so a new line can be created.\t*/\n\tgetNextLineFromPuffer: function getNextLineFromPuffer() {\n\t\tcc.log('M: getNextLineFromPuffer');\n\t\tvar ret = [];\n\t\tif (pufferField.length === nextFirstLine) {\n\t\t\tcc.log('Puffer array is empty!');\n\t\t\t/*pufferField = [];\r\n    pufferField = Level.L13C;\r\n    nextFirstLine = 0;*/\n\t\t\t//TODO umkommentieren\n\t\t\tthis.defineNextRandomArray();\n\t\t\t//this.testArray()\n\t\t\tret = pufferField[nextFirstLine];\n\t\t\tnextFirstLine = nextFirstLine + 1;\n\t\t} else {\n\t\t\t//cc.log('Getting next array line fro puffer...')\n\t\t\tret = pufferField[nextFirstLine];\n\t\t\tnextFirstLine = nextFirstLine + 1;\n\t\t}\n\t\t//cc.log('Returning next puffer array line, exiting getNextLineFromPuffer', ret);\n\t\treturn ret;\n\t},\n\n\t//TODO nur ein Dummy zum testen, später LÖSCHEN!\n\ttestArray: function testArray() {\n\t\tpufferField = [];\n\t\tpufferFieldItems = [];\n\t\tpufferField = Level.L33C;\n\t\tpufferFieldItems = Level.L33I;\n\t\tnextFirstLine = 0;\n\t\tnextFirstLineItem = 0;\n\t},\n\n\t/* Gets the next line from the item-puffer, so a new line can be created.\t*/\n\tgetNextLineFromItemPuffer: function getNextLineFromItemPuffer() {\n\t\tcc.log('M: getNextLineFromItemPuffer');\n\t\tvar ret = [];\n\n\t\tif (pufferFieldItems.length === nextFirstLineItem) {\n\t\t\t//TODO hier muessen wir noch reagieren\n\t\t\tcc.log('ItemPuffer array is empty!');\n\t\t\t/*pufferFieldItems = [];\r\n    pufferFieldItems = Level.L13I;\r\n    nextFirstLineItem = 0;*/\n\t\t\tret = pufferFieldItems[nextFirstLineItem];\n\t\t\tnextFirstLineItem = nextFirstLineItem + 1;\n\t\t} else {\n\t\t\tret = pufferFieldItems[nextFirstLineItem];\n\t\t\tnextFirstLineItem = nextFirstLineItem + 1;\n\t\t}\n\t\treturn ret;\n\t},\n\n\tdefineNextRandomArray: function defineNextRandomArray() {\n\t\t//Score?!\n\t\tvar score = this.game.getComponent('Game').score;\n\t\tconsole.log('M: defineNextRandomArray');\n\t\tconsole.log('Score ausgelesen: ', score);\n\n\t\tpufferField = [];\n\t\tpufferFieldItems = [];\n\n\t\tvar rand = Math.random() * 10 + 1;\n\t\tconsole.log('Random: ', rand);\n\n\t\tif (score <= 35) {\n\t\t\tif (rand < 4) {\n\t\t\t\tconsole.log('WIR WEISE L11C zu');\n\t\t\t\tpufferField = Level.L11C;\n\t\t\t\tpufferFieldItems = Level.L11I;\n\t\t\t} else if (rand < 7) {\n\t\t\t\tconsole.log('WIR WEISE L12C zu');\n\t\t\t\tpufferField = Level.L12C;\n\t\t\t\tpufferFieldItems = Level.L12I;\n\t\t\t} else {\n\t\t\t\tconsole.log('WIR WEISE L13C zu');\n\t\t\t\tpufferField = Level.L13C;\n\t\t\t\tpufferFieldItems = Level.L13I;\n\t\t\t}\n\t\t} else if (score <= 70) {\n\t\t\tif (rand < 4) {\n\t\t\t\tconsole.log('WIR WEISE L21C zu');\n\t\t\t\tpufferField = Level.L21C;\n\t\t\t\tpufferFieldItems = Level.L21I;\n\t\t\t} else if (rand < 7) {\n\t\t\t\tconsole.log('WIR WEISE L22C zu');\n\t\t\t\tpufferField = Level.L22C;\n\t\t\t\tpufferFieldItems = Level.L22I;\n\t\t\t} else {\n\t\t\t\tconsole.log('WIR WEISE L23C zu');\n\t\t\t\tpufferField = Level.L23C;\n\t\t\t\tpufferFieldItems = Level.L23I;\n\t\t\t}\n\t\t} else {\n\t\t\tif (rand < 4) {\n\t\t\t\tconsole.log('WIR WEISE L31C zu');\n\t\t\t\tpufferField = Level.L31C;\n\t\t\t\tpufferFieldItems = Level.L31I;\n\t\t\t} else if (rand < 7) {\n\t\t\t\tconsole.log('WIR WEISE L32C zu');\n\t\t\t\tpufferField = Level.L32C;\n\t\t\t\tpufferFieldItems = Level.L32I;\n\t\t\t} else {\n\t\t\t\tconsole.log('WIR WEISE L33C zu');\n\t\t\t\tpufferField = Level.L33C;\n\t\t\t\tpufferFieldItems = Level.L33I;\n\t\t\t}\n\t\t}\n\t\tnextFirstLine = 0;\n\t\tnextFirstLineItem = 0;\n\t},\n\n\taddZOrderToGameField: function addZOrderToGameField() {\n\t\tcc.log('M: addZOrderToGameField');\n\t\tvar count = 1;\n\t\tfor (var y = 0; y < this.gameField.length; y++) {\n\t\t\tfor (var x = 0; x < this.gameField[y].length; x++) {\n\t\t\t\tthis.gameField[y][x].setLocalZOrder(count);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetBlockType: function getBlockType(block) {\n\t\tcc.log('M: getBlockType');\n\t\tcc.log(block.name);\n\t\t//var ret = block.getClassName();\n\t\t//cc.log(ret);\n\t\treturn block.name;\n\t},\n\n\tcallPrefab: function callPrefab(pref) {\n\t\tthis.pref.node.collide();\n\t}\n});\n/*\r\n initializeField2: function(x,y){\r\n this.gameField = [x];\r\n for (var h = 0; h < x; h++) { //create array with uneven rows\r\n if(h%2===1){\r\n this.gameField[h] = [y-1]; //uneven\r\n } else {\r\n this.gameField[h] = [y];\r\n }\r\n }\r\n\n for (var i = 0; i < this.gameField.length; i++) {\r\n for (var j = 0; j < this.gameField[i].length; j++) {\r\n if(this.gameField[i].length%2===1){ // even array/row\r\n newCube = this.spawnCube(startX+(x*distX), startY-(distY*y), startField2[i][j]);\r\n }\r\n else{ // uneven array/row\r\n newCube = this.spawnCube(startX+(x*distX)-(distX/2), startY-(distY*y), startField2[i][j]);\r\n }\r\n this.gameField[i][j] = newCube; //TODO add blocks not numbers\r\n }\r\n }\r\n\n\n cc.log(\"Field:\");\r\n for (var i = 0; i < this.gameField.length; i++) {\r\n cc.log(this.gameField[i].join(\"Row: \"+i+\" \"));\r\n }\r\n },\r\n\n addFirstFieldRow: function(row){\r\n this.field.unshift(row);\r\n },\r\n\n removeLastFieldRow: function(){\r\n this.field.pop();\r\n },\r\n\n addFieldRow : function(index, row){\r\n this.field[index] = row;\r\n },\r\n\n removeFieldRow : function(index){\r\n var temp = [this.gridSizeX];\r\n for(var h = 0; h < this.gridSizeX; h++){\r\n temp[h] = this.field[h];\r\n }\r\n\n for(var i = 0; i < this.gridSizeX; i++){\r\n if(i != 0){\r\n var newindex = i-1;\r\n cc.log(\"Ind: \"+newindex);\r\n this.field[i] = temp[newindex];\r\n }\r\n }\r\n },\r\n\n generateRow : function(){\r\n var i = this.gridSizeX+this.count;\r\n this.count++;\r\n return [i,i,i,i,i];\r\n //TODO: load a row from tiled file return array\r\n },*/\n\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"Level\":\"Level\",\"States\":\"States\",\"Types\":\"Types\"}],\"Game\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '076ef+CbqVCFK/Q9scrL8Ui', 'Game');\n// scripts\\Game.js\n\n//Game\n// Imports\nvar GameState = require('States').GameState;\nvar PlayerMovementState = require('States').PlayerMovementState;\nvar Step = require('Types').BlockType;\n\nvar whichStep = Step.None;\nvar updateAccess = true;\nvar onSteppKills = false;\nvar killActionExecuted = false;\nvar pressDouble = 0;\n\n//disables the antialiasing, because it destroys the pixelart\nvar __ccTexture2D_handleLoadedTexture = cc.Texture2D.prototype.handleLoadedTexture;\ncc.Texture2D.prototype.handleLoadedTexture = function () {\n    __ccTexture2D_handleLoadedTexture.apply(this, arguments);\n    this.setAliasTexParameters();\n};\n\nvar pressCount = 0;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        state: {\n            'default': GameState.None,\n            type: GameState\n        },\n        // Game Data/Objects\n        gamefield: {\n            'default': null,\n            type: cc.Node\n        },\n\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n\n        // Game-UI\n        scoreLabel: {\n            'default': null,\n            type: cc.Label\n        },\n\n        multiplierLabel: {\n            'default': null,\n            type: cc.Label\n        },\n\n        // Music Theme\n        themeurl: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        //this.setFrameRate(60);\n        this.storage = cc.sys.localStorage;\n        this.state = GameState.Waiting;\n        //this.GameState = GameState;\n        this.initalizeInputControl(); // Activate input handling\n\n        cc.audioEngine.playMusic(this.themeurl, true);\n        this.storage.setItem('score', 0);\n\n        this.score = 0;\n        this.scoreMultiplier = 1;\n        this.multiplierActive = false;\n\n        this.steppedBlock = null;\n    },\n\n    reset: function reset() {},\n\n    // Called when player onLoad() has finished\n    onPlayerLoadCallback: function onPlayerLoadCallback() {\n        this.gamefield.player = this.player;\n\n        // Player is assembled. set all needed graphical information\n        this.player.node.setPosition(this.gamefield.getStartPosition());\n        this.player.node.setLocalZOrder(1000);\n        this.player.dx = this.gamefield.disTX / 2; //only half the distance on x!!\n        this.player.dy = this.gamefield.disTY;\n    },\n\n    // Called when gamefield is initalized ( onLoad() has finished )\n    onGameFieldLoadCallback: function onGameFieldLoadCallback() {},\n\n    //TODO hier wird ein Fehler verursacht, wenn Gift NACH einem Switcher kommt!\n    validateMove: function validateMove(dir) {\n\n        if (this.state === GameState.GameOver) {\n            //console.log('Du darfst nicht bewegen, weil du gameOver bist');\n            return false;\n        }\n\n        if (this.player.movestate === PlayerMovementState.Jumping || this.player.movestate === PlayerMovementState.Falling) {\n            //Player already jumping/falling -> neglect input\n            return false;\n        }\n        //var currentfield = this.player.oldDest;\n        //console.log('BlockType: ', this.gamefield.getBlockType(this.gamefield.getJumpField(dir)));\n        //console.log('var destfield = ', destfield);\n\n        // Handle swaped case\n        if (this.player.isSwaped) {\n            dir = -dir;\n        }\n\n        // Handle slowed case\n        if (this.player.isSlowed) {\n            console.log(\"PRESSCOUNT\" + pressCount);\n            pressCount++;\n            if (pressCount < 3) {\n                console.log(\"STILL SLOWED\");\n                return false;\n            } else {\n                console.log(\"RELEASE\" + pressCount);\n                pressCount = 0;\n                this.player.isSlowed = false;\n                //return true;\n            }\n        }\n\n        this.destfield = this.gamefield.getJumpField(dir);\n        //console.log('destfield = ', this.destfield);\n        //console.log('destfield = ', this.destfield.name);\n        //steppedBlock is necessarry for movement-collisioncontroll\n        var steppedBlock = this.destfield.getComponent(this.destfield.name);\n\n        if (steppedBlock.isBlocked) {\n            return false;\n        }\n        this.player.isSwaped = false;\n\n        // !!! INSERT lines at end of file when bugs happen here !!!\n\n        //\n        //Move was correct.\n        //\n        //Change player direction\n        this.player.dir = dir;\n        this.incrementScore(1);\n        this.scoreLabel.string = this.score.toString();\n\n        return true;\n    },\n\n    initalizeInputControl: function initalizeInputControl() {\n\n        var self = this;\n\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                if (self.state == GameState.Paused) return;\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        if (self.state === GameState.Waiting) self.state = GameState.Playing;\n\n                        if (self.validateMove(1)) {\n                            self.player.move(self.destfield, self);\n                            self.gamefield.updatePlayerArrayPos(); // Change array position after jump or bugs will spawn\n                            if (self.player.oldDest !== undefined) {\n                                self.player.oldDest.getComponent(self.player.oldDest.name).playerOnTop = false;\n                            }\n                        }\n                        break;\n                    case cc.KEY.d:\n                        if (self.state === GameState.Waiting) self.state = GameState.Playing;\n\n                        if (self.validateMove(-1)) {\n                            self.player.move(self.destfield, self);\n                            self.gamefield.updatePlayerArrayPos();\n                            if (self.player.oldDest !== undefined) {\n                                self.player.oldDest.getComponent(self.player.oldDest.name).playerOnTop = false;\n                            }\n                        }\n                        break;\n                    case cc.KEY.u:\n                        self.gamefield.updateField(-10);\n                        break;\n                    case cc.KEY.k:\n                        self.player.kill();\n                        break;\n                    case cc.KEY.escape:\n                        cc.log(\"Escape pressed\");\n                        // TODO: what to do on escaped-pressed?\n                        break;\n                    case cc.KEY.f:\n                        self.player.fall();\n                        break;\n                }\n            },\n\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n\n                        break;\n                    case cc.KEY.d:\n\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //console.log('M: update');\n        if (this.state === GameState.Playing) {\n            this.moveFieldWithPlayer();\n        }\n        if (this.state === GameState.GameOver) {\n            this.storage.setItem('score', this.score);\n            cc.director.loadScene('GameOverScene');\n        }\n    },\n\n    moveFieldWithPlayer: function moveFieldWithPlayer() {\n        var ySpeed = this.player.arrayPosY;\n        // cc.log('Playerpos', ySpeed);\n        if (updateAccess) {\n            //cc.log('UPDATE-Cases betreten');\n            updateAccess = false;\n            switch (ySpeed) {\n                case 8:\n                    updateAccess = this.gamefield.updateField(-0.3);\n                    break;\n                case 7:\n                    updateAccess = this.gamefield.updateField(-0.4);\n                    break;\n                case 6:\n                    updateAccess = this.gamefield.updateField(-1);\n                    break;\n                case 5:\n                    updateAccess = this.gamefield.updateField(-1.5);\n                    break;\n                case 4:\n                    updateAccess = this.gamefield.updateField(-2);\n                    break;\n                case 3:\n                    updateAccess = this.gamefield.updateField(-4);\n                    break;\n                case 2:\n                    updateAccess = this.gamefield.updateField(-8);\n                    break;\n                case 1:\n                    updateAccess = this.gamefield.updateField(-12);\n                    break;\n                case 0:\n                    updateAccess = this.gamefield.updateField(-20);\n                    break;\n                default:\n                    updateAccess = this.gamefield.updateField(-0.3);\n                    break;\n            }\n        }\n    },\n\n    //\n    // HELPING METHODS. SMALL STUFF\n    //\n\n    changeMultiplier: function changeMultiplier(value) {\n        //TODO: Stop and start action by tag\n        this.scoreMultiplier = value;\n        this.multiplierLabel.string = \"Multiplier: \" + this.scoreMultiplier;\n        this.multiplierLabel.node.opacity = 255;\n        var resetMultiplierCallback = cc.callFunc(this.resetMultiplier, this);\n        this.multiplierLabel.node.runAction(cc.sequence(cc.fadeOut(5), resetMultiplierCallback));\n    },\n\n    resetMultiplier: function resetMultiplier() {\n        this.scoreMultiplier = 0;\n    },\n\n    incrementScore: function incrementScore(inc) {\n        this.score += inc * this.scoreMultiplier;\n    },\n\n    //Deprecated\n    checkItemCollision: function checkItemCollision(item) {\n        var itempos = item.node.getPosition();\n        var ppos = this.player.node.getPosition();\n        var dist = cc.pDistance(itempos, ppos);\n        if (dist < item.collectRadius) {\n            item.onPickUpCallback(this.player);\n        }\n    }\n\n});\n/*switch(destfield){\r\n    case 'Grass':\r\n        //console.log('case Grass');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Grass').isBlocked){\r\n            ret = true;\r\n        }\r\n        //steppedBlock is necessarry for Collisioncontroll\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Grass');\r\n        whichStep = Step.Grass;\r\n        break;\r\n    case 'Dirt':\r\n        //console.log('case dirt');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Dirt').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Dirt');\r\n        whichStep = Step.Dirt;\r\n        break;\r\n    case 'Trapdoor':\r\n        //console.log('case Trapdoor');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Trapdoor').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Trapdoor');\r\n        whichStep = Step.Trapdoor;\r\n        break;\r\n    case 'Empty':\r\n        //console.log('case Empty');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Empty').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Empty');\r\n        whichStep = Step.Empty;\r\n        break;\r\n    case 'Water_Border':\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Empty').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Empty');\r\n        whichStep = Step.Empty;\r\n        break;\r\n    case 'Poison':\r\n        //console.log('case Poison');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Poison').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Poison');\r\n        whichStep = Step.Poison;\r\n        break;\r\n    case 'Switcher':\r\n        //console.log('case Switcher');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Switcher').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Switcher');\r\n        whichStep = Step.Switcher;\r\n        break;\r\n    case 'Spike':\r\n        //console.log('case Spike');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Spike').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Spike');\r\n        whichStep = Step.Spike;\r\n        //console.log('steppedBlock auf Spike gesetzt');\r\n        //console.log(this.steppedBlock);\r\n        break;\r\n    default:\r\n        ret = true;\r\n        break;\r\n}*/\n\n/*var destfield = this.gamefield.getJumpField(dir); // Field player wants to jump at\r\n console.log('M: validatemMove');\r\n console.log('BlockType = ', this.gamefield.getBlockType(this.gamefield.getJumpField(dir)));\r\n this.steppedBlock = destfield.getComponent('Block');\r\n if(this.steppedBlock !== null){\r\n if(this.steppedBlock.isBlocked){    // Block is...blocked\r\n return false;\r\n }\r\n }*/\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Grass\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '65b91llmkxJtJkhqsYzFp71', 'Grass');\n// scripts\\gamefield\\blocks\\Grass.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Grass');\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Item\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'a9d5fhMpDRB7rnwgzl0Y19Z', 'Item');\n// scripts\\gameobjects\\Item.js\n\n\nvar ItemType = require('Types').ItemType;\nvar ItemState = require('States').ItemState;\nvar ItemActivityState = require('States').ItemActivityState;\n\nvar riseY = 50;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        itemtype: {\n            'default': ItemType.None,\n            type: ItemType\n        },\n\n        itemstate: {\n            'default': ItemState.Pickable,\n            type: ItemState\n        },\n\n        activitystate: {\n            'default': ItemActivityState.Idle,\n            type: ItemActivityState\n        },\n\n        collectRadius: 0,\n        itemValue: 0, // Value of the item when picked up(pure score, score multiplier)\n        itemTimer: 0,\n\n        activationsound: { // Drag right audio here.\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    destroyItem: function destroyItem() {\n        console.log(\"Itemtype to destroy: \" + this.itemtype.toString());\n        console.log(ItemType[this.itemtype]);\n        switch (this.itemtype) {\n            case ItemType.Slower:\n                break;\n            case ItemType.Antidote:\n            case ItemType.Coin:\n            case ItemType.Star:\n                this.node.destroy();\n                break;\n        }\n    },\n\n    onPickUpCallback: function onPickUpCallback(player, game) {\n        this.itemstate = ItemState.Picked;\n        this.activitystate = ItemActivityState.Active;\n        // Perform the action the item produces(change player or environment)\n        switch (this.itemtype) {\n            case ItemType.Antidote:\n                player.isPoisoned = false;\n                player.poisonTmp = player.poisonTimer; //reset timmer\n                break;\n            case ItemType.Coin:\n                console.log('GAME: ', game.name);\n                game.incrementScore(5);\n                game.scoreLabel.string = game.score.toString();\n                break;\n            case ItemType.Star:\n                player.isPoisoned = false;\n                player.isInvincible = true;\n                break;\n            case ItemType.Slower:\n                console.log(\"SET SWAPED TRUE\");\n                player.isSlowed = true;\n                break;\n        }\n        var pickedCallback = cc.callFunc(this.picked, this);\n        var soundcallback = cc.callFunc(this.playSound, this);\n        // Perform item animation and destroy it\n        this.node.runAction(cc.sequence(cc.spawn(this.assemblePickUpAction(), soundcallback), pickedCallback));\n    },\n\n    assemblePickUpAction: function assemblePickUpAction() {\n        this.activitystate = ItemActivityState.Active;\n        // Rise-Animation for items to show they have been picked up       \n        var risePoint = cc.p(this.node.getPositionX(), this.node.getPositionY() + riseY);\n        var fade = cc.fadeOut(this.getItemAnimationTime()); // Let item fade during animation\n        var anim = null;\n\n        switch (this.itemtype) {\n            case ItemType.Star:\n            case ItemType.Coin:\n            case ItemType.Antidote:\n                anim = cc.moveBy(this.getItemAnimationTime(), risePoint);\n                break;\n        }\n        return cc.spawn(fade, anim);\n    },\n\n    getItemAnimationTime: function getItemAnimationTime(type) {\n        switch (this.itemtype) {\n            case ItemType.Antidote:\n            case ItemType.Coin:\n            case ItemType.Star:\n                return 1.5;\n        }\n    },\n\n    picked: function picked() {\n        this.activitystate = ItemActivityState.Expired;\n        this.destroyItem();\n    },\n\n    playSound: function playSound() {\n        if (this.activationsound !== null) cc.audioEngine.playEffect(this.activationsound, false);\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Level\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '7c45etIGUtBC5VbkAJJ2UCT', 'Level');\n// scripts\\gamefield\\Level.js\n\n//Level\nvar L11C = [[7, 1, 1, 6, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 7, 1, 6, 1, 7, 7], [7, 1, 1, 1, 1, 7], [7, 7, 1, 6, 1, 7, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 6, 1, 1, 7], [7, 6, 1, 1, 6, 7]];\n\nvar L11I = [[0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0], [0, 8, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L12C = [[7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 4, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 3, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n\nvar L12I = [[0, 4, 7, 0, 0, 0, 0], [0, 4, 7, 0, 0, 0], [0, 4, 4, 7, 0, 0, 0], [0, 4, 4, 7, 9, 0], [0, 4, 4, 4, 7, 0, 0], [0, 0, 0, 0, 6, 0], [0, 0, 7, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L13C = [[7, 1, 5, 1, 1, 1, 7], [7, 6, 1, 1, 1, 7], [7, 1, 7, 1, 1, 1, 7], [7, 1, 7, 1, 1, 7], [7, 1, 1, 7, 1, 1, 7], [7, 1, 1, 7, 6, 7], [7, 1, 1, 7, 1, 1, 7], [7, 1, 7, 1, 1, 7]];\n\nvar L13I = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 7, 0, 0], [0, 9, 0, 4, 0, 7, 0], [0, 9, 0, 4, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0]];\n\nvar L21C = [[7, 2, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 7], [7, 7, 2, 2, 2, 7, 7], [7, 6, 6, 6, 6, 7], [7, 2, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 7]];\n\nvar L21I = [[0, 7, 0, 7, 4, 7, 0], [0, 7, 3, 0, 7, 0], [0, 7, 0, 7, 3, 7, 0], [0, 9, 7, 7, 9, 0], [0, 0, 9, 4, 9, 0, 0], [0, 0, 0, 0, 0, 0], [0, 9, 7, 6, 7, 9, 0], [0, 9, 9, 9, 9, 0]];\n\nvar L22C = [[7, 4, 4, 7, 4, 4, 7], [7, 4, 7, 7, 2, 7], [7, 7, 2, 7, 4, 7, 7], [7, 4, 7, 7, 4, 7], [7, 7, 4, 7, 2, 7, 7], [7, 4, 7, 7, 4, 7], [7, 7, 2, 7, 4, 7, 7], [7, 4, 7, 7, 4, 7]];\n\nvar L22I = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L23C = [[7, 2, 2, 2, 2, 2, 7], [7, 5, 5, 5, 5, 7], [7, 3, 2, 2, 2, 3, 7], [7, 3, 2, 2, 3, 7], [7, 3, 3, 2, 2, 2, 7], [7, 3, 2, 3, 2, 7], [7, 3, 2, 3, 3, 2, 7], [7, 2, 2, 3, 2, 7]];\n\nvar L23I = [[0, 9, 9, 6, 9, 9, 0], [0, 0, 0, 0, 0, 0], [0, 0, 9, 3, 9, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 9, 3, 0, 0], [0, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L31C = [[7, 3, 5, 3, 5, 3, 7], [7, 4, 3, 3, 4, 7], [7, 3, 6, 3, 6, 3, 7], [7, 3, 4, 4, 3, 7], [7, 3, 3, 6, 3, 3, 7], [7, 3, 2, 4, 3, 7], [7, 3, 4, 3, 6, 3, 7], [7, 3, 2, 3, 2, 7]];\n\nvar L31I = [[0, 4, 0, 4, 0, 0, 0], [0, 0, 4, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 3, 0]];\n\nvar L32C = [[7, 7, 2, 7, 2, 7, 7], [7, 6, 7, 7, 6, 7], [7, 7, 4, 3, 4, 7, 7], [7, 5, 6, 6, 5, 7], [7, 6, 7, 2, 7, 6, 7], [7, 4, 7, 6, 4, 7], [7, 7, 2, 7, 2, 7, 7], [7, 3, 2, 7, 2, 7]];\n\nvar L32I = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 4, 9, 0, 0, 0, 0], [0, 2, 1, 0, 1, 0]];\n\nvar L33C = [[7, 1, 6, 1, 6, 1, 7], [7, 1, 3, 1, 3, 7], [7, 6, 1, 6, 1, 6, 7], [7, 1, 4, 4, 1, 7], [7, 5, 3, 6, 3, 5, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n\nvar L33I = [[0, 0, 3, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 0], [0, 0, 1, 2, 0, 0]];\n\nmodule.exports = {\n    L11C: L11C,\n    L11I: L11I,\n    L12C: L12C,\n    L12I: L12I,\n    L13C: L13C,\n    L13I: L13I,\n    L21C: L21C,\n    L21I: L21I,\n    L22C: L22C,\n    L22I: L22I,\n    L23C: L23C,\n    L23I: L23I,\n    L31C: L31C,\n    L31I: L31I,\n    L32C: L32C,\n    L32I: L32I,\n    L33C: L33C,\n    L33I: L33I\n};\n\ncc._RFpop();\n},{}],\"MenuButtonCallbacks\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '10915ky+jBFrIsAE/lnyWqN', 'MenuButtonCallbacks');\n// scripts\\scenescripts\\MenuButtonCallbacks.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n\n        buttonAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    startControlCallback: function startControlCallback() {\n        var onLaunched = function onLaunched() {\n            //use this for callbacks on loading\n            console.log('Scene launched');\n        };\n        cc.director.loadScene('GameScene', onLaunched);\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    aboutControlCallback: function aboutControlCallback() {\n        cc.director.loadScene('About');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    tutorialControlCallback: function tutorialControlCallback() {\n        cc.director.loadScene('Tutorial');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    quitControlCallback: function quitControlCallback() {\n        //cc.director.end(); //TODO: how to end the game?\n        cc.log(\"Quit pressed.\");\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    backControlCallback: function backControlCallback() {\n        cc.director.loadScene('Startmenu');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}],\"Player\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'dfcfezAAcJAALXPiIHVJj2d', 'Player');\n// scripts\\gameobjects\\Player.js\n\nvar GameState = require('States').GameState;\nvar PlayerMovementState = require('States').PlayerMovementState;\nvar PlayerState = require('States').PlayerState;\n\nvar explodetime = 0.2;\nvar riseDeathY = 25;\n\nvar animationNeedsUpdate = false;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // Player spawns in a standing state\n        movestate: {\n            'default': PlayerMovementState.Standing,\n            type: PlayerMovementState\n        },\n\n        isInvincible: false, // Player picked up an item which made him unkillable\n        isPoisoned: false,\n        isAlive: false,\n        isSwaped: false, //Player stands on a Switcher //TODO: nutzlos da nie verwendet in player\n        isSlowed: false,\n\n        poisonTimer: 0,\n        invincibiltyTimer: 0,\n\n        dir: 0, // Next Position player is jumping to 1 : left  -1: right\n\n        arrayPosX: 0, //Position in the array given with row and column\n        arrayPosY: 0,\n\n        jumpTime: 0, // Time for jumping action to run\n        fallTime: 0, // same: falling\n\n        // Atlas holdin all sprites of the player.\n        playeratlas: {\n            'default': null,\n            type: cc.SpriteAtlas\n        },\n\n        // Player Audios\n        jumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        deathAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        fallAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        drinkAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        poisonedAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        // Game reference to pass player\n        game: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        //register player at game for processing player logic\n        this.game.getComponent('Game').player = this;\n\n        //Init timers\n        this.poisonTmp = this.poisonTimer;\n        this.invincibiltyTmp = this.invincibiltyTimer; //Henri fragen ob man properties speichern kann\n\n        this.movestate = PlayerMovementState.Standing;\n        this.isMoving = false;\n        this.isAlive = true;\n        //this.oldDest = this.game.getComponent('Game').gamefield.gameField[gameField.length-1][3];\n\n        this.offsetY = this.node.getContentSize().height / 2; // Offset to set the player on top of blocks\n        this.destinationpos = cc.p(0, 0);\n\n        //Load data relevant to player   -- !! LEAVE AT END OF THIS FUNCTION !! --\n        this.game.getComponent('Game').onPlayerLoadCallback();\n    },\n\n    kill: function kill() {\n        this.isInvincible = false;\n        this.isAlive = false;\n        var gamestatecallback = cc.callFunc(this.changeGameState, this);\n        var soundcallback = cc.callFunc(this.playSound, this);\n        this.node.runAction(cc.sequence(cc.spawn(this.deform(), this.assembleAction()), gamestatecallback, soundcallback));\n        cc.audioEngine.stopAllEffects(); //TODO evtl als callback\n    },\n\n    fall: function fall() {\n        this.isInvincible = false;\n        this.movestate = PlayerMovementState.Falling;\n        //var gamestatecallback = cc.callFunc(this.changeGameFallState,this);\n        var killcallback = cc.callFunc(this.kill, this);\n        var soundcallback = cc.callFunc(this.playSound, this);\n        this.node.runAction(cc.sequence(cc.spawn(this.deform(), this.assembleAction()), soundcallback, killcallback));\n        this.isAlive = false; //set here because alive impacts death anim.\n        cc.audioEngine.stopAllEffects();\n    },\n\n    changeGameState: function changeGameState() {\n        if (!this.isAlive) this.game.getComponent('Game').state = GameState.GameOver;\n    },\n    changeGameFallState: function changeGameFallState() {\n        console.log(\"Alive: \" + this.isAlive);\n        if (this.isAlive) this.isAlive = false;\n        console.log('Change GameState: ', this.game.getComponent('Game').state);\n        this.game.getComponent('Game').state = GameState.GameOver;\n        console.log(this.game.getComponent('Game').state);\n    },\n\n    changePlayerState: function changePlayerState() {\n        switch (this.movestate) {\n            case PlayerMovementState.Jumping:\n                this.movestate = PlayerMovementState.Standing;\n                break;\n        }\n    },\n\n    blockStepped: function blockStepped(player, game) {\n        this.gAme = game;\n        var steppedBlock = this.destfield.getComponent(this.destfield.name);\n        console.log('STEPPED BLOCK: ', steppedBlock);\n        console.log(this.destfield.name);\n        steppedBlock.onStepCallback(this, game);\n        var item = steppedBlock.getComponentInChildren('Item');\n        if (item !== null) item.onPickUpCallback(this, this.gAme);\n    },\n    //\n    // Movement and Actions\n    //\n\n    //Called everytime a the figure is moved by pressing A or D\n    move: function move(destfield, game) {\n        if (this.isAlive === false) return;\n        this.oldDest = this.destfield;\n        this.destfield = destfield; // Direction players wants to move the figure(-1 or 1)\n        switch (this.movestate) {\n            case PlayerMovementState.Standing:\n                this.movestate = PlayerMovementState.Jumping;\n\n                var soundCallback = cc.callFunc(this.playSound, this);\n                var playerstateCallback = cc.callFunc(this.changePlayerState, this);\n                var blockstepCallback = cc.callFunc(this.blockStepped, this, game);\n                this.switchPlayerAppearance();\n                this.setDestinationPos();\n\n                this.node.runAction(cc.sequence(cc.spawn(this.deform(), this.assembleAction()), blockstepCallback, soundCallback, playerstateCallback));\n                break;\n\n            case PlayerMovementState.Jumping:\n            case PlayerMovementState.Falling:\n                return;\n        }\n    },\n\n    setDestinationPos: function setDestinationPos() {\n        this.destinationpos.x = this.destfield.getPositionX();\n        this.destinationpos.y = this.destfield.getPositionY() + this.offsetY;\n    },\n\n    switchPlayerAppearance: function switchPlayerAppearance() {\n        this.updated = this.updateAnimation();\n        if (this.updated) // if animations is running dont go to sprite frame changing\n            return;\n        if (this.dir < 0) {\n            // Player looks left\n            this.getComponent(cc.Sprite).spriteFrame = this.playeratlas.getSpriteFrame(\"player_left\");\n        } else {\n            this.getComponent(cc.Sprite).spriteFrame = this.playeratlas.getSpriteFrame(\"player_right\");\n        }\n    },\n\n    assembleAction: function assembleAction() {\n        if (this.isAlive === false) //Player dead -> action TODO: versaut fallen animation\n            return cc.moveBy(explodetime, cc.p(0, riseDeathY));\n\n        switch (this.movestate) {\n            case PlayerMovementState.Standing:\n                break;\n            case PlayerMovementState.Falling:\n                return cc.moveTo(this.fallTime, cc.p(this.node.getPosition().x, 0)).easing(cc.easeCubicActionIn());\n\n            case PlayerMovementState.Jumping:\n                // Points forming the beziercurve\n                var bezier = [this.node.getPosition(), this.destinationpos, this.destinationpos];\n                return cc.bezierTo(this.jumpTime, bezier);\n        }\n    },\n\n    deform: function deform() {\n        if (this.isAlive === false) //Player dead -> deform\n            return cc.sequence(cc.scaleTo(explodetime, 1.3, 1.3), cc.scaleTo(explodetime, 0.0, 0.0));\n\n        switch (this.movestate) {// Player in a moving state -> action\n\n            case PlayerMovementState.Jumping:\n                var scaletime = this.jumpTime * 0.5;\n                return cc.sequence(cc.scaleTo(scaletime, 1, 1.1), cc.scaleTo(scaletime, 1, 0.9), cc.scaleTo(scaletime, 1, 1.0));\n\n            case PlayerMovementState.Falling:\n                this.node.setLocalZOrder(this.destfield.getLocalZOrder()); //TODO: fall wird schon während des jumps ausgeführt -> spieler verschwindet hinter vorbeigesprungenen blöcken\n                var fallDeform = cc.scaleTo(this.fallTime, 0.85, 0.85);\n                var fallfade = cc.fadeOut(this.fallTime * 4);\n                return cc.spawn(fallDeform, fallfade.easing(cc.easeCubicActionOut()));\n        }\n        // Might be useful sometime\n        if (this.isPoisoned) return null;\n\n        if (this.isInvincible) return null;\n    },\n\n    //\n    //  Sounds\n    //\n\n    playSound: function playSound() {\n        if (!this.isAlive) {\n            cc.audioEngine.playEffect(this.deathAudio, false);\n            return;\n        }\n\n        if (this.isPoisoned) cc.audioEngine.playEffect(this.poisonedAudio, false);\n\n        switch (this.movestate) {\n            case PlayerMovementState.Jumping:\n                cc.audioEngine.playEffect(this.jumpAudio, false);\n                break;\n            case PlayerMovementState.Falling:\n                cc.audioEngine.playEffect(this.fallAudio, false);\n                break;\n\n        }\n    },\n\n    //\n    // Status and Update of player\n    //\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.isAlive) {\n            this.updateTimers(dt);\n            //this.updateAnimation();\n        }\n    },\n\n    updateAnimation: function updateAnimation() {\n        if (!this.animation) // Init animation\n            this.animation = this.getComponent(cc.Animation);\n        if (!this.isPoisoned && !this.isInvincible) {\n            //NICE TO HAVE: no bools\n            this.animation.stop();\n            return false;\n        }\n\n        if (this.isPoisoned || this.isInvincible) this.animation.play(this.getAnimation());\n        return true;\n    },\n\n    updateTimers: function updateTimers(dt) {\n        if (this.isPoisoned) if (this.poisonTmp <= 0) {\n            //timer ran out -> kill player\n            this.isPoisoned = false;\n            this.isAlive = false;\n            this.kill();\n        } else {\n            this.poisonTmp -= dt; //decrease timer...hurry!\n        }\n\n        if (this.isInvincible) if (this.invincibiltyTmp <= 0) {\n            //timer ran out -> downrank player\n            this.isInvincible = false;\n            this.invincibiltyTmp = this.invincibiltyTimer;\n        } else {\n            this.invincibiltyTmp -= dt; //decrease timer...hurry!\n        }\n    },\n\n    isMoving: function isMoving() {\n        switch (this.movestate) {//switch for possible further states\n            case PlayerMovementState.Jumping:\n                this.isMoving = true;\n                return true;\n\n            case PlayerMovementState.Standing:\n                return false;\n        }\n    },\n\n    isAlive: (function (_isAlive) {\n        function isAlive() {\n            return _isAlive.apply(this, arguments);\n        }\n\n        isAlive.toString = function () {\n            return _isAlive.toString();\n        };\n\n        return isAlive;\n    })(function () {\n        return isAlive;\n    }),\n\n    getAnimation: function getAnimation() {\n        if (this.dir < 0) {\n            if (this.isPoisoned) {\n                return 'poison_left_anim'; //play('poison_left_anim');\n            }\n\n            if (this.isInvincible) {\n                return 'star_left_anim'; //play('poison_left_anim');\n            }\n        } else {\n                if (this.isPoisoned) {\n                    return 'poison_right_anim'; //play('poison_left_anim');\n                }\n\n                if (this.isInvincible) {\n                    return 'star_right_anim'; //play('poison_left_anim');\n                }\n            }\n    }\n\n});\n/*\r\nmakeInvincible: function(){\r\n    this.isInvincible = true;\r\n    //TODO: start invincibility timer\r\n},\r\n  poison: function(){\r\n    this.isPoisoned = true;\r\n    //TODO: start poison timer and killing phase if turn based poison is neglected\r\n},\r\n  shot : function(){\r\n  },*/\n\ncc._RFpop();\n},{\"States\":\"States\"}],\"Poison\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'e050ffZnUVAjKB8fySd+ZdO', 'Poison');\n// scripts\\gamefield\\blocks\\Poison.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Poison');\n        console.log('DU WURDEST VERGIFTET');\n        /*if(player.poisonTimer<6 || player.poisonTimer>6){\r\n            console.log('Der Timer ist kleiner 6');\r\n            if(!player.isPoisoned){\r\n                console.log('Der Spieler ist noch nicht vergiftet');\r\n                player.poisonTimer = 0;\r\n            }\r\n        }*/\n\n        if (!player.isInvincible) player.isPoisoned = true;\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Spike\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'e22c3Q4gXBNCp5WTGCtGqSz', 'Spike');\n// scripts\\gamefield\\blocks\\Spike.js\n\nvar alreadyKilled = false;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isDeadly: true\n    },\n\n    // foo: {\n    //    default: null,      // The default value will be used only when the component attaching\n    //                           to a node for the first time\n    //    url: cc.Texture2D,  // optional, default is typeof default\n    //    serializable: true, // optional, default is true\n    //    visible: true,      // optional, default is true\n    //    displayName: 'Foo', // optional\n    //    readonly: false,    // optional, default is false\n    // },\n    // ...\n    switchDeadly: function switchDeadly() {\n        //console.log('isDeadly: ', this.isDeadly);\n        this.isDeadly = !this.isDeadly;\n        this.hasKilled = false;\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.isDeadly = true;\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        this.player = player;\n        this.playerOnTop = true;\n        console.log('M: Onstep Spike');\n        console.log('OnS isDeadly: ', this.isDeadly);\n        if (!this.hasKilled) this.performSpikeKill();\n    },\n\n    performSpikeKill: function performSpikeKill() {\n        if (!this.isDeadly && !this.player.isInvincible) {\n            console.log('Uups, das war tötlich');\n            if (!alreadyKilled) {\n                this.player.kill();\n                alreadyKilled = true;\n            }\n            this.hasKilled = true;\n        } else {\n            console.log('Glück gehabt');\n        }\n    },\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.playerOnTop) this.performSpikeKill();\n    }\n});\n\ncc._RFpop();\n},{}],\"States\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, 'f8af3m3LglPNY34Ddb9VWD0', 'States');\n// scripts\\enums\\States.js\n\nvar GameState = cc.Enum({\n    None: 999,\n    Idle: -1, // Waiting for Player to choose something in the menu\n    Loading: -1, // Player pressed Start -> load game\n    Waiting: -1, // Waiting for first move to start timers etc\n    Playing: -1, // Game loaded and started\n    GameOver: -1, //Player died\n    Paused: -1, // Game was paused by the player\n    Resumed: -1, // Game was resumed after pausing\n    Ended: -1 });\n\n// Game was closed by the player or he lost -> back to idle?\nvar PlayerMovementState = cc.Enum({\n    Standing: -1, //Player is standing still (has fully arrived on a block)\n    Jumping: -1, //Player is moving onto another block(in animation)\n    Falling: -1 });\n\n//Player is falling down the gamefield\nvar ItemState = cc.Enum({\n    Pickable: -1,\n    Blocked: -1,\n    Picked: -1\n});\n\nvar ItemActivityState = cc.Enum({\n    Idle: -1,\n    Active: -1,\n    Expired: -1\n});\n\nvar PlayerState = cc.Enum({\n    Alive: -1,\n    Dead: -1,\n    Poisoned: -1,\n    Invincible: -1\n});\n\nmodule.exports = {\n    GameState: GameState,\n    PlayerMovementState: PlayerMovementState,\n    ItemState: ItemState,\n    PlayerState: PlayerState,\n    ItemActivityState: ItemActivityState\n};\n\ncc._RFpop();\n},{}],\"Switcher\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '4323d4XJ4ZMiZ2wx+yx7E7n', 'Switcher');\n// scripts\\gamefield\\blocks\\Switcher.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Switcher');\n        player.isSwaped = true;\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Trapdoor\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '1c710YvWvBAcqTBB0WMuN9v', 'Trapdoor');\n// scripts\\gamefield\\blocks\\Trapdoor.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        var animCtrl = this.node.getComponent(cc.Animation);\n        animCtrl.play('trapdoor');\n        var fall = cc.moveTo(1, cc.p(this.node.getPositionX(), this.node.getPositionY() - 100));\n        //var calLback = cc.callFunc(this.destroy, this);\n        //this.node.runAction(cc.sequence(fall,calLback));\n        this.node.runAction(fall);\n        player.fall();\n        //game.state = game.GameState.GameOver;\n    },\n\n    collide: function collide() {},\n\n    destroy: function destroy() {\n        this.node.destroy();\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{\"States\":\"States\",\"Types\":\"Types\"}],\"Types\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '71b93SRN0BO1qKSq55EU/WI', 'Types');\n// scripts\\enums\\Types.js\n\nvar ItemType = cc.Enum({\n    None: 999,\n    Star: -1, // Score\n    Coin: -1, // Climb two(f.e.) rows up\n    Antidote: -1, // Cures poison\n    Blocker: -1,\n    Slower: -1\n});\n\nvar BlockType = cc.Enum({\n    None: -1,\n    Empty: -1,\n    Dirt: -1,\n    Grass: -1,\n    Poison: -1,\n    Switcher: -1,\n    Trapdoor: -1,\n    Spike: -1\n});\n\nmodule.exports = {\n    ItemType: ItemType,\n    BlockType: BlockType\n};\n\ncc._RFpop();\n},{}],\"WaterRight\":[function(require,module,exports){\n\"use strict\";\ncc._RFpush(module, '96e20B9zFpCUKKVUnxPN/H9', 'WaterRight');\n// scripts\\gamefield\\blocks\\WaterRight.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();\n},{}]},{},[\"Game\",\"Block\",\"MenuButtonCallbacks\",\"Trapdoor\",\"Switcher\",\"Grass\",\"GameButtonCallbacks\",\"Types\",\"CloudAnimation\",\"Level\",\"WaterRight\",\"Item\",\"Empty\",\"Player\",\"GameField\",\"Poison\",\"Spike\",\"States\",\"Dirt\"])\n\n","\"use strict\";\ncc._RFpush(module, '7288fjsiXFAlL+LiGenQ8Or', 'CloudAnimation');\n// scripts\\scenescripts\\CloudAnimation.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'fe13c6ji91IGKAaD1cGpfSK', 'Dirt');\n// scripts\\gamefield\\blocks\\Dirt.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Dirt');\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'beeafQj1LhHkLDEkhzDV3+0', 'Empty');\n// scripts\\gamefield\\blocks\\Empty.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        /*gamefield: {\r\n            default: null,\r\n            type: cc.Node,\r\n        },*/\n\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        // Perform the action the block produces(change player or environment)\n        player.fall();\n    },\n\n    collide: function collide() {\n        cc.log('wir sind in der Methode');\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '69e769081xGNbDZBmrDRLFu', 'GameButtonCallbacks');\n// scripts\\scenescripts\\GameButtonCallbacks.js\n\nvar GameState = require('States').GameState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        pauseOverlay: {\n            'default': null,\n            type: cc.Node\n        },\n\n        scoreLabel: {\n            'default': null,\n            type: cc.Label\n        },\n\n        buttonAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        game: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        /*if(game !== undefined)\r\n            this.scoreLabel.string = \"Score: \"+game.getComponent('Game').score.toString();\r\n            */\n        this.score = cc.sys.localStorage.getItem('score');\n        console.log('Score in GameButtonCallback: ', this.score);\n        if (this.scoreLabel !== null) {\n            console.log('SCORELABEL');\n            console.log(this.scoreLabel);\n            this.scoreLabel.string = \"Score: \" + this.score.toString();\n        }\n        this.paused = false; // TODO: spread this to the outer world\n    },\n\n    pauseControlCallback: function pauseControlCallback() {\n        //TODO: change pause button to different sprite\n        if (this.paused) {\n            this.pauseOverlay.opacity = 0;\n            cc.director.resume();\n            this.paused = false;\n            this.game.state = GameState.Playing;\n\n            cc.log(\"resume\");\n        } else {\n            this.pauseOverlay.opacity = 255;\n            cc.director.pause();\n            this.paused = true;\n            this.game.state = GameState.Paused;\n            cc.log(\"paused\");\n        }\n\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    againControlCallback: function againControlCallback() {\n        cc.director.loadScene('GameScene');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    backControlCallback: function backControlCallback() {\n        this.game.state = GameState.Ended;\n        cc.director.loadScene('Startmenu');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'e001f+mMWNN5YhXykLdMFLZ', 'GameField');\n// scripts\\gamefield\\GameField.js\n\n//GameField\n\nvar Level = require('Level');\nvar BlockType = require('Types').BlockType;\nvar ItemType = require('Types').ItemType;\nvar GameState = require('States').GameState;\n\nvar startX = 113;\nvar startY = 501;\n\nvar distX = 83;\nvar distY = 65;\n\nvar spawnOffSetY = 200;\nvar despawnOffSetY = -100;\nvar ySpawnPosition = 485;\n\nvar startField = [[7, 1, 2, 2, 1, 7], [7, 1, 5, 1, 2, 1, 7], [7, 2, 1, 1, 2, 7], [7, 2, 1, 1, 1, 2, 7], [7, 2, 1, 1, 2, 7], [7, 1, 2, 1, 5, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 1, 2, 1, 1, 7]\n/*[7,1,1,1,1,0],\r\n [7,1,1,1,1,1,0],\r\n [7,1,1,4,4,5],\r\n [7,1,1,1,5,1,0],\r\n [7,1,1,1,1,0],\r\n [7,5,6,3,1,1,0],\r\n [7,1,1,5,1,0],\r\n [7,1,1,1,1,1,0],*/\n];\n\n//Array for each individual block\nvar pufferField = [[7, 1, 6, 6, 6, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 3, 1, 3, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 2, 1, 2, 1, 7], [7, 3, 2, 2, 3, 7], [7, 7, 1, 1, 1, 7, 7], [7, 1, 1, 4, 4, 7], [7, 4, 1, 4, 1, 4, 7], [7, 4, 1, 1, 1, 7], [7, 4, 1, 1, 1, 1, 7], [7, 5, 1, 5, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 6, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n/*\r\n The items-array has the same dimensions as the startField. Each item will be a child of the corresponding block (seen as a layover).\r\n // 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\r\n // 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\r\n //TODO: 10.WaterLeft, 11.WaterRight */\nvar startFieldItems = [[0, 8, 0, 0, 8, 0], [0, 8, 0, 7, 0, 8, 0], [0, 0, 7, 7, 2, 0], [0, 6, 7, 7, 7, 0, 0], [0, 0, 7, 7, 0, 0], [0, 7, 4, 7, 0, 7, 0], [0, 7, 0, 0, 7, 0], [0, 8, 8, 0, 8, 8, 0]];\n\n/*\r\n The items-array has the same dimensions as the pufferField. Each item will be a child of the corresponding block (seen as a layover).\r\n // 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\r\n // 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\r\n //TODO: 10.WaterLeft, 11.WaterRight */\nvar pufferFieldItems = [[0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 0], [0, 0, 9, 7, 9, 0, 0], [0, 9, 7, 0, 0, 0], [0, 0, 7, 0, 7, 0, 0], [0, 0, 7, 9, 9, 0], [0, 0, 7, 7, 0, 7, 0], [0, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 7, 0, 0], [0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0]];\n\nvar nextFirstLine = 0;\nvar nextFirstLineItem = 0;\n\nvar newCube = null;\nvar newItem = null;\n\ncc.Class({\n\t'extends': cc.Component,\n\n\tproperties: {\n\t\tgridSizeX: 0, // Rows - dont change here but in cocos creator!!\n\t\tgridSizeY: 0, // Columns\n\n\t\tdespawnHeight: 0,\n\n\t\titem: {\n\t\t\t'default': null,\n\t\t\ttype: cc.Node\n\t\t},\n\n\t\t//Blocks start here\n\t\tEmpty: { //0\t\tEMPTY\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tGrass: { //1\t\tGRASS\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tDirt: { //2\t\tDIRT\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tTrapdoor: { //3\t\tTRAPDOOR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSwitcher: { //4\t\tSWITCHER\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tPoison: { //5\t\tPOISON\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSpike: { //6\t\tSPIKE\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tWaterC: { //7\t\tWATER (Like EMPTY)\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\n\t\t// Game reference to pass field\n\t\tgame: {\n\t\t\t'default': null,\n\t\t\ttype: cc.Node\n\t\t},\n\n\t\t//Items start here\n\t\t// 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\n\t\t// 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\n\t\t//TODO: 10.WaterLeft, 11.WaterRight\n\t\tAntidoteL: { //1\t\tAntidoteL\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tAntidoteR: { //2\t\tAntidoteR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tCoinL: { //3\t\tCoinL\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tCoinR: { //4\t\tCoinR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tStarL: { //5\t\tStarL\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tStarR: { //6\t\tStarR\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\n\t\tBlockedBush: { //7\t\tBlockedBush\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tBlockedStone: { //8\t\tBlockedStone\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSlowDownBottom: { //9\t\tSlowDownBottom (Bottom and Top are always together)\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\tSlowDownTop: { //9\t\tSlowDownTop (Bottom and Top are always together)\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t},\n\t\t/*\r\n   WaterLeft: {\t\t\t\t\t\t//10\t\tWaterLeft\r\n   default: null,\r\n   type: cc.Prefab,\r\n   },*/\n\t\tWaterRight: { //11\t\tWaterRight\n\t\t\t'default': null,\n\t\t\ttype: cc.Prefab\n\t\t}\n\n\t},\n\n\t//Player\n\t// use this for initialization\n\tonLoad: function onLoad() {\n\t\t//register gamefield at game for processing gamefield logic\n\t\tthis.game.getComponent('Game').gamefield = this;\n\n\t\tthis.player = null; // load later when player ran onLoad()\n\t\tthis.count = 0;\n\t\tthis.gameField = [];\n\t\tthis.items = [];\n\n\t\tthis.disTX = distX;\n\t\tthis.disTY = distY;\n\t\tthis.resetArrays();\n\t\tthis.initializeField();\n\n\t\tthis.game.getComponent('Game').onGameFieldLoadCallback();\n\t},\n\n\tresetArrays: function resetArrays() {\n\t\tnextFirstLine = 0;\n\t\tnextFirstLineItem = 0;\n\t\tpufferField = [[7, 1, 6, 6, 6, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 3, 1, 3, 1, 7], [7, 1, 2, 2, 1, 7], [7, 1, 2, 1, 2, 1, 7], [7, 3, 2, 2, 3, 7], [7, 7, 1, 1, 1, 7, 7], [7, 1, 1, 4, 4, 7], [7, 4, 1, 4, 1, 4, 7], [7, 4, 1, 1, 1, 7], [7, 4, 1, 1, 1, 1, 7], [7, 5, 1, 5, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 6, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n\t\tpufferFieldItems = [[0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 0], [0, 0, 9, 7, 9, 0, 0], [0, 9, 7, 0, 0, 0], [0, 0, 7, 0, 7, 0, 0], [0, 0, 7, 9, 9, 0], [0, 0, 7, 7, 0, 7, 0], [0, 0, 7, 0, 8, 0], [0, 0, 0, 0, 0, 7, 0], [0, 0, 0, 7, 0, 0], [0, 0, 7, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0]];\n\t},\n\n\tinitializeField: function initializeField() {\n\n\t\tfor (var y = 0; y < startField.length; y++) {\n\t\t\tthis.gameField[y] = [];\n\t\t\tfor (var x = 0; x < startField[y].length; x++) {\n\t\t\t\tif (startField[y].length % 2 === 0) {\n\t\t\t\t\tnewCube = this.spawnCube(startX + x * distX, startY - distY * y, startField[y][x], startFieldItems[y][x]);\n\t\t\t\t} else {\n\t\t\t\t\tnewCube = this.spawnCube(startX + x * distX - distX / 2, startY - distY * y, startField[y][x], startFieldItems[y][x]);\n\t\t\t\t}\n\t\t\t\t//cc.log('Adding new cube: ');\n\t\t\t\t//cc.log(newCube);\n\t\t\t\tthis.gameField[y][x] = newCube;\n\t\t\t}\n\t\t}\n\t},\n\n\t/* Displaces the entire gamefield by *Speed*-Pixel\r\n  * In case border is crossed -> delete lowest row */\n\tupdateField: function updateField(speed) {\n\t\tfor (var y = 0; y < this.gameField.length; y++) {\n\t\t\tfor (var x = 0; x < this.gameField[y].length; x++) {\n\t\t\t\tvar posX = this.gameField[y][x].getPositionX();\n\t\t\t\tvar posY = this.gameField[y][x].getPositionY();\n\t\t\t\tthis.gameField[y][x].setPosition(posX, posY + speed);\n\t\t\t}\n\t\t}\n\t\tthis.updatePlayer(speed);\n\t\t/*var fieldx =  this.node.getPositionX(); //BUGGY\r\n  var fieldy = this.node.getPositionY();\r\n  this.node.setPosition(fieldx, fieldy+speed); */\n\t\t//WENN GRENZE UEBERSCHRITTEN; DANN WIRD ZEILE GELÖSCHT\n\t\tif (this.gameField[this.gameField.length - 1][0].getPositionY() <= this.despawnHeight) {\n\t\t\tcc.log('WIR SIND ZU WEIT!');\n\t\t\tthis.destroyLine(this.gameField.length - 1);\n\t\t\tthis.rearrangeGameField();\n\t\t}\n\t\treturn true;\n\t},\n\n\tupdatePlayer: function updatePlayer(speed) {\n\t\tvar x = this.player.node.getPositionX();\n\t\tvar y = this.player.node.getPositionY();\n\t\tthis.player.node.setPosition(x, y + speed);\n\t},\n\n\tupdatePlayerArrayPos: function updatePlayerArrayPos() {\n\n\t\tif (this.gameField[this.player.arrayPosY].length % 2 == 0) {\n\t\t\tif (this.player.dir < 0) {\n\t\t\t\tthis.player.arrayPosX = this.player.arrayPosX + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.player.dir > 0) {\n\t\t\t\tthis.player.arrayPosX = this.player.arrayPosX - 1;\n\t\t\t}\n\t\t}\n\n\t\tthis.player.arrayPosY = this.player.arrayPosY - 1;\n\t},\n\n\tgetStartPosition: function getStartPosition() {\n\t\tvar mid = Math.round(Number(this.gameField[this.gameField.length - 1].length / 2)) - 1;\n\t\tvar startField = this.gameField[this.gameField.length - 1][mid];\n\t\t//TODO: move this more suitable\n\t\tthis.player.arrayPosX = mid;\n\t\tthis.player.arrayPosY = this.gameField.length - 1;\n\t\tthis.player.oldDest = startField;\n\t\tvar startpos = cc.p(startField.getPositionX(), startField.getPositionY() + this.player.offsetY);\n\t\treturn startpos;\n\t},\n\n\tgetJumpField: function getJumpField(dir) {\n\t\tif (this.gameField[this.player.arrayPosY].length % 2 == 0) {\n\t\t\tif (dir > 0) {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX];\n\t\t\t} else {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX + 1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (dir > 0) {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX - 1];\n\t\t\t} else {\n\t\t\t\treturn this.gameField[this.player.arrayPosY - 1][this.player.arrayPosX];\n\t\t\t}\n\t\t}\n\t},\n\n\t//TODO: destroy items on that line\n\tdestroyLine: function destroyLine(line) {\n\t\tfor (var i = 0; i < this.gameField[line].length; i++) {\n\t\t\t//this.gameField[line][i].destroy();\n\t\t\tthis.destroyBlock(this.gameField[line][i]);\n\t\t}\n\t},\n\n\tdestroyBlock: function destroyBlock(block) {\n\t\tvar fall = cc.moveTo(1, cc.p(block.getPosition().x, despawnOffSetY)).easing(cc.easeCubicActionIn());\n\t\tvar fade = cc.fadeOut(1.5);\n\t\tblock.runAction(cc.sequence(cc.spawn(fall, fade), cc.callFunc(this.destroyBlockData, this)));\n\t},\n\n\tdestroyBlockData: function destroyBlockData(block) {\n\t\tblock.destroy();\n\t},\n\n\trearrangeGameField: function rearrangeGameField() {\n\t\t//cc.log('M: rearrangeGameField')\n\t\tvar returnA = [];\n\t\tvar x = this.gameField[1][0].getPositionX();\n\t\treturnA[0] = this.createFirstLine(x);\n\t\tfor (var i = 0; i < this.gameField.length - 1; i++) {\n\t\t\treturnA[i + 1] = this.gameField[i];\n\t\t}\n\t\tthis.gameField = returnA;\n\t\tthis.addZOrderToGameField();\n\t\tthis.player.arrayPosY = this.player.arrayPosY + 1;\n\t\tif (this.player.arrayPosY >= this.gameField.length) {\n\t\t\tconsole.log('M: rearrange kills player');\n\t\t\tthis.player.fall();\n\t\t\tthis.game.getComponent('Game').state = GameState.GameOver;\n\t\t}\n\t},\n\n\tcreateFirstLine: function createFirstLine(x) {\n\t\tcc.log('M: createFirstLine');\n\t\tvar returnA = [];\n\t\t//next line from block-puffer\n\t\tvar array = this.getNextLineFromPuffer();\n\t\t//next line from item-puffer\n\t\tvar arrayItems = this.getNextLineFromItemPuffer();\n\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tif (array.length % 2 == 0) {\n\n\t\t\t\treturnA[i] = this.spawnCube(x + i * distX, ySpawnPosition + distY - spawnOffSetY, array[i], arrayItems[i]);\n\t\t\t\treturnA[i].opacity = 0;\n\t\t\t\tvar rise = cc.moveTo(1, cc.p(returnA[i].getPosition().x, ySpawnPosition + distY)).easing(cc.easeCubicActionIn());\n\t\t\t\tvar fade = cc.fadeIn(1);\n\t\t\t\treturnA[i].runAction(cc.spawn(fade, rise));\n\t\t\t} else {\n\t\t\t\t//newCube = this.spawnBlueCube(startX+(x*distX)-(distX/2), startY-(distY*y));\n\t\t\t\t//cc.log('wir haben ein ungerades Array');\n\n\t\t\t\treturnA[i] = this.spawnCube(x + i * distX, ySpawnPosition + distY - spawnOffSetY, array[i], arrayItems[i]);\n\t\t\t\treturnA[i].opacity = 0;\n\t\t\t\tvar rise = cc.moveTo(1, cc.p(returnA[i].getPosition().x, ySpawnPosition + distY)).easing(cc.easeCubicActionIn());\n\t\t\t\tvar fade = cc.fadeIn(1);\n\t\t\t\treturnA[i].runAction(cc.spawn(fade, rise));\n\t\t\t}\n\t\t}\n\t\treturn returnA;\n\t},\n\n\t//TODO: add code to each case, so items are created as well (as of now, item-code only exists in case 1)\n\tspawnCube: function spawnCube(x, y, cubeNumber, itemNumber) {\n\t\tcc.log('M: spawnCube');\n\t\tswitch (cubeNumber) {\n\t\t\tcase 0:\n\t\t\t\t//generate a new node in the scene with a preset template\n\t\t\t\tvar newCube = cc.instantiate(this.Empty);\n\t\t\t\tnewCube.getComponent('Empty').blocktype = BlockType.Empty;\n\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tvar newCube = cc.instantiate(this.Grass);\n\t\t\t\tnewCube.getComponent('Grass').blocktype = BlockType.Grass;\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Grass');\n\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tvar newCube = cc.instantiate(this.Dirt);\n\t\t\t\tnewCube.getComponent('Dirt').blocktype = BlockType.Dirt;\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Dirt');\n\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tvar newCube = cc.instantiate(this.Trapdoor);\n\t\t\t\tnewCube.getComponent('Trapdoor').blocktype = BlockType.Trapdoor;\n\t\t\t\tnewCube.getComponent('Trapdoor').sprite = newCube;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\t//newCube = this.spawnItem(newCube, itemNumber, 'Trapdoor');\n\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tvar newCube = cc.instantiate(this.Switcher);\n\t\t\t\tnewCube.getComponent('Switcher').blocktype = BlockType.Switcher;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Switcher');\n\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tvar newCube = cc.instantiate(this.Poison);\n\t\t\t\tnewCube.getComponent('Poison').blocktype = BlockType.Poison;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Poison');\n\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tvar newCube = cc.instantiate(this.Spike);\n\t\t\t\tnewCube.getComponent('Spike').blocktype = BlockType.Spike;\n\t\t\t\t//TODO: delete the following three lines, testing purposes only. Trapdoor never has items on it.\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Spike');\n\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tvar newCube = cc.instantiate(this.WaterC);\n\t\t\t\tnewCube.getComponent('Empty').blocktype = BlockType.Empty;\n\t\t\t\tnewCube.name = 'Empty';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar newCube = cc.instantiate(this.Grass);\n\t\t\t\tnewCube.getComponent('Grass').blocktype = BlockType.Grass;\n\t\t\t\t//creating new item and adding it to cube\n\t\t\t\t//var newItemToAdd = this.spawnItem(itemNumber);\n\t\t\t\tnewCube = this.spawnItem(newCube, itemNumber, 'Grass');\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//set up a position for the \"EMPTY\"\n\t\t//newCube.setAnchorPoint(cc.p(0,0));\n\t\t//-----newCube.addChild(newItemToAdd);\n\t\tnewCube.setPosition(x, y);\n\t\t//put the newly added node under the Canvas node\n\n\t\tthis.node.addChild(newCube);\n\n\t\t//cc.log('Returning the following cube: ');\n\t\t//cc.log(newCube);\n\t\treturn newCube;\n\t},\n\n\t// 0.Empty, 1.antidoteLeft, 2.antidoteRight, 3.coinLeft, 4.coinRight, 5.starLeft,\n\t// 6.starRight, 7.BlockedBush, 8.BlockedStone, 9.SlowDownBottom, 9.SlowDownTop\n\t//TODO: 10.WaterLeft, 11.WaterRight\n\tspawnItem: function spawnItem(parentBlock, itemNumber, blockName) {\n\t\tswitch (itemNumber) {\n\t\t\tcase 0:\n\t\t\t\t//Empty/ no item\n\t\t\t\tvar newItem = cc.instantiate(this.Empty);\n\t\t\t\tnewItem.name = 'Empty';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t//antidoteLeft\n\t\t\t\tvar newItem = cc.instantiate(this.AntidoteL);\n\t\t\t\tnewItem.name = 'AntidoteL';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Antidote;\n\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t//antidoteRight\n\t\t\t\tvar newItem = cc.instantiate(this.AntidoteR);\n\t\t\t\tnewItem.name = 'AntidoteR';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Antidote;\n\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t//coinLeft\n\t\t\t\tvar newItem = cc.instantiate(this.CoinL);\n\t\t\t\tnewItem.name = 'CoinL';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Coin;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t//coinRight\n\t\t\t\tvar newItem = cc.instantiate(this.CoinR);\n\t\t\t\tnewItem.name = 'CoinR';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Coin;\n\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t//starLeft\n\t\t\t\tvar newItem = cc.instantiate(this.StarL);\n\t\t\t\tnewItem.name = 'starLeft';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Star;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t//starRight\n\t\t\t\tvar newItem = cc.instantiate(this.StarR);\n\t\t\t\tnewItem.name = 'starRight';\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Star;\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\t//BlockedBush\n\t\t\t\tvar newItem = cc.instantiate(this.BlockedBush);\n\t\t\t\tnewItem.name = 'BlockedBush';\n\t\t\t\tparentBlock.getComponent(blockName).isBlocked = true;\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Blocker;\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t//BlockedStone\n\t\t\t\tvar newItem = cc.instantiate(this.BlockedStone);\n\t\t\t\tnewItem.name = 'BlockedStone';\n\t\t\t\tparentBlock.getComponent(blockName).isBlocked = true;\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Blocker;\n\t\t\t\tbreak;\n\t\t\tcase 9:\n\t\t\t\t//SlowDown (Top AND Bottom)\n\t\t\t\tvar newItem = cc.instantiate(this.SlowDownBottom);\n\t\t\t\tnewItem.getComponent('Item').itemtype = ItemType.Slower;\n\t\t\t\tnewItem.name = 'SlowDownBottom';\n\n\t\t\t\tvar newItem2 = cc.instantiate(this.SlowDownTop);\n\t\t\t\tnewItem2.getComponent('Item').itemtype = ItemType.Slower;\n\t\t\t\tnewItem.addChild(newItem2);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t//Empty/ no item\n\t\t\t\tvar newItem = cc.instantiate(this.Empty);\n\t\t\t\tnewItem.name = 'Empty';\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//Items are in three classes:\n\t\t//1. Float above cube\n\t\t//2. Sit on top of cube\n\t\t//3. Same position as cube (no repositioning necessary)\n\t\tvar floatAboveCube = [1, 2, 3, 4, 5, 6];\n\t\tvar rightOnTopOfCube = [7, 8, 9, 10];\n\n\t\tif (floatAboveCube.includes(itemNumber)) {\n\t\t\tvar posY = newItem.getPositionY();\n\t\t\tvar posX = newItem.getPositionX();\n\t\t\tnewItem.setPosition(posX, posY + 50);\n\t\t} else if (rightOnTopOfCube.includes(itemNumber)) {\n\t\t\tvar posY = newItem.getPositionY();\n\t\t\tvar posX = newItem.getPositionX();\n\t\t\tnewItem.setPosition(posX, posY + 40);\n\t\t}\n\t\tparentBlock.getComponent(blockName).item = newItem;\n\t\tparentBlock.addChild(newItem);\n\n\t\treturn parentBlock;\n\t},\n\n\t/* Gets the next line from the block-puffer, so a new line can be created.\t*/\n\t/* Gets the next line from the block-puffer, so a new line can be created.\t*/\n\tgetNextLineFromPuffer: function getNextLineFromPuffer() {\n\t\tcc.log('M: getNextLineFromPuffer');\n\t\tvar ret = [];\n\t\tif (pufferField.length === nextFirstLine) {\n\t\t\tcc.log('Puffer array is empty!');\n\t\t\t/*pufferField = [];\r\n    pufferField = Level.L13C;\r\n    nextFirstLine = 0;*/\n\t\t\t//TODO umkommentieren\n\t\t\tthis.defineNextRandomArray();\n\t\t\t//this.testArray()\n\t\t\tret = pufferField[nextFirstLine];\n\t\t\tnextFirstLine = nextFirstLine + 1;\n\t\t} else {\n\t\t\t//cc.log('Getting next array line fro puffer...')\n\t\t\tret = pufferField[nextFirstLine];\n\t\t\tnextFirstLine = nextFirstLine + 1;\n\t\t}\n\t\t//cc.log('Returning next puffer array line, exiting getNextLineFromPuffer', ret);\n\t\treturn ret;\n\t},\n\n\t//TODO nur ein Dummy zum testen, später LÖSCHEN!\n\ttestArray: function testArray() {\n\t\tpufferField = [];\n\t\tpufferFieldItems = [];\n\t\tpufferField = Level.L33C;\n\t\tpufferFieldItems = Level.L33I;\n\t\tnextFirstLine = 0;\n\t\tnextFirstLineItem = 0;\n\t},\n\n\t/* Gets the next line from the item-puffer, so a new line can be created.\t*/\n\tgetNextLineFromItemPuffer: function getNextLineFromItemPuffer() {\n\t\tcc.log('M: getNextLineFromItemPuffer');\n\t\tvar ret = [];\n\n\t\tif (pufferFieldItems.length === nextFirstLineItem) {\n\t\t\t//TODO hier muessen wir noch reagieren\n\t\t\tcc.log('ItemPuffer array is empty!');\n\t\t\t/*pufferFieldItems = [];\r\n    pufferFieldItems = Level.L13I;\r\n    nextFirstLineItem = 0;*/\n\t\t\tret = pufferFieldItems[nextFirstLineItem];\n\t\t\tnextFirstLineItem = nextFirstLineItem + 1;\n\t\t} else {\n\t\t\tret = pufferFieldItems[nextFirstLineItem];\n\t\t\tnextFirstLineItem = nextFirstLineItem + 1;\n\t\t}\n\t\treturn ret;\n\t},\n\n\tdefineNextRandomArray: function defineNextRandomArray() {\n\t\t//Score?!\n\t\tvar score = this.game.getComponent('Game').score;\n\t\tconsole.log('M: defineNextRandomArray');\n\t\tconsole.log('Score ausgelesen: ', score);\n\n\t\tpufferField = [];\n\t\tpufferFieldItems = [];\n\n\t\tvar rand = Math.random() * 10 + 1;\n\t\tconsole.log('Random: ', rand);\n\n\t\tif (score <= 35) {\n\t\t\tif (rand < 4) {\n\t\t\t\tconsole.log('WIR WEISE L11C zu');\n\t\t\t\tpufferField = Level.L11C;\n\t\t\t\tpufferFieldItems = Level.L11I;\n\t\t\t} else if (rand < 7) {\n\t\t\t\tconsole.log('WIR WEISE L12C zu');\n\t\t\t\tpufferField = Level.L12C;\n\t\t\t\tpufferFieldItems = Level.L12I;\n\t\t\t} else {\n\t\t\t\tconsole.log('WIR WEISE L13C zu');\n\t\t\t\tpufferField = Level.L13C;\n\t\t\t\tpufferFieldItems = Level.L13I;\n\t\t\t}\n\t\t} else if (score <= 70) {\n\t\t\tif (rand < 4) {\n\t\t\t\tconsole.log('WIR WEISE L21C zu');\n\t\t\t\tpufferField = Level.L21C;\n\t\t\t\tpufferFieldItems = Level.L21I;\n\t\t\t} else if (rand < 7) {\n\t\t\t\tconsole.log('WIR WEISE L22C zu');\n\t\t\t\tpufferField = Level.L22C;\n\t\t\t\tpufferFieldItems = Level.L22I;\n\t\t\t} else {\n\t\t\t\tconsole.log('WIR WEISE L23C zu');\n\t\t\t\tpufferField = Level.L23C;\n\t\t\t\tpufferFieldItems = Level.L23I;\n\t\t\t}\n\t\t} else {\n\t\t\tif (rand < 4) {\n\t\t\t\tconsole.log('WIR WEISE L31C zu');\n\t\t\t\tpufferField = Level.L31C;\n\t\t\t\tpufferFieldItems = Level.L31I;\n\t\t\t} else if (rand < 7) {\n\t\t\t\tconsole.log('WIR WEISE L32C zu');\n\t\t\t\tpufferField = Level.L32C;\n\t\t\t\tpufferFieldItems = Level.L32I;\n\t\t\t} else {\n\t\t\t\tconsole.log('WIR WEISE L33C zu');\n\t\t\t\tpufferField = Level.L33C;\n\t\t\t\tpufferFieldItems = Level.L33I;\n\t\t\t}\n\t\t}\n\t\tnextFirstLine = 0;\n\t\tnextFirstLineItem = 0;\n\t},\n\n\taddZOrderToGameField: function addZOrderToGameField() {\n\t\tcc.log('M: addZOrderToGameField');\n\t\tvar count = 1;\n\t\tfor (var y = 0; y < this.gameField.length; y++) {\n\t\t\tfor (var x = 0; x < this.gameField[y].length; x++) {\n\t\t\t\tthis.gameField[y][x].setLocalZOrder(count);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t},\n\n\tgetBlockType: function getBlockType(block) {\n\t\tcc.log('M: getBlockType');\n\t\tcc.log(block.name);\n\t\t//var ret = block.getClassName();\n\t\t//cc.log(ret);\n\t\treturn block.name;\n\t},\n\n\tcallPrefab: function callPrefab(pref) {\n\t\tthis.pref.node.collide();\n\t}\n});\n/*\r\n initializeField2: function(x,y){\r\n this.gameField = [x];\r\n for (var h = 0; h < x; h++) { //create array with uneven rows\r\n if(h%2===1){\r\n this.gameField[h] = [y-1]; //uneven\r\n } else {\r\n this.gameField[h] = [y];\r\n }\r\n }\r\n\n for (var i = 0; i < this.gameField.length; i++) {\r\n for (var j = 0; j < this.gameField[i].length; j++) {\r\n if(this.gameField[i].length%2===1){ // even array/row\r\n newCube = this.spawnCube(startX+(x*distX), startY-(distY*y), startField2[i][j]);\r\n }\r\n else{ // uneven array/row\r\n newCube = this.spawnCube(startX+(x*distX)-(distX/2), startY-(distY*y), startField2[i][j]);\r\n }\r\n this.gameField[i][j] = newCube; //TODO add blocks not numbers\r\n }\r\n }\r\n\n\n cc.log(\"Field:\");\r\n for (var i = 0; i < this.gameField.length; i++) {\r\n cc.log(this.gameField[i].join(\"Row: \"+i+\" \"));\r\n }\r\n },\r\n\n addFirstFieldRow: function(row){\r\n this.field.unshift(row);\r\n },\r\n\n removeLastFieldRow: function(){\r\n this.field.pop();\r\n },\r\n\n addFieldRow : function(index, row){\r\n this.field[index] = row;\r\n },\r\n\n removeFieldRow : function(index){\r\n var temp = [this.gridSizeX];\r\n for(var h = 0; h < this.gridSizeX; h++){\r\n temp[h] = this.field[h];\r\n }\r\n\n for(var i = 0; i < this.gridSizeX; i++){\r\n if(i != 0){\r\n var newindex = i-1;\r\n cc.log(\"Ind: \"+newindex);\r\n this.field[i] = temp[newindex];\r\n }\r\n }\r\n },\r\n\n generateRow : function(){\r\n var i = this.gridSizeX+this.count;\r\n this.count++;\r\n return [i,i,i,i,i];\r\n //TODO: load a row from tiled file return array\r\n },*/\n\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '076ef+CbqVCFK/Q9scrL8Ui', 'Game');\n// scripts\\Game.js\n\n//Game\n// Imports\nvar GameState = require('States').GameState;\nvar PlayerMovementState = require('States').PlayerMovementState;\nvar Step = require('Types').BlockType;\n\nvar whichStep = Step.None;\nvar updateAccess = true;\nvar onSteppKills = false;\nvar killActionExecuted = false;\nvar pressDouble = 0;\n\n//disables the antialiasing, because it destroys the pixelart\nvar __ccTexture2D_handleLoadedTexture = cc.Texture2D.prototype.handleLoadedTexture;\ncc.Texture2D.prototype.handleLoadedTexture = function () {\n    __ccTexture2D_handleLoadedTexture.apply(this, arguments);\n    this.setAliasTexParameters();\n};\n\nvar pressCount = 0;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        state: {\n            'default': GameState.None,\n            type: GameState\n        },\n        // Game Data/Objects\n        gamefield: {\n            'default': null,\n            type: cc.Node\n        },\n\n        player: {\n            'default': null,\n            type: cc.Node\n        },\n\n        // Game-UI\n        scoreLabel: {\n            'default': null,\n            type: cc.Label\n        },\n\n        multiplierLabel: {\n            'default': null,\n            type: cc.Label\n        },\n\n        // Music Theme\n        themeurl: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        //this.setFrameRate(60);\n        this.storage = cc.sys.localStorage;\n        this.state = GameState.Waiting;\n        //this.GameState = GameState;\n        this.initalizeInputControl(); // Activate input handling\n\n        cc.audioEngine.playMusic(this.themeurl, true);\n        this.storage.setItem('score', 0);\n\n        this.score = 0;\n        this.scoreMultiplier = 1;\n        this.multiplierActive = false;\n\n        this.steppedBlock = null;\n    },\n\n    reset: function reset() {},\n\n    // Called when player onLoad() has finished\n    onPlayerLoadCallback: function onPlayerLoadCallback() {\n        this.gamefield.player = this.player;\n\n        // Player is assembled. set all needed graphical information\n        this.player.node.setPosition(this.gamefield.getStartPosition());\n        this.player.node.setLocalZOrder(1000);\n        this.player.dx = this.gamefield.disTX / 2; //only half the distance on x!!\n        this.player.dy = this.gamefield.disTY;\n    },\n\n    // Called when gamefield is initalized ( onLoad() has finished )\n    onGameFieldLoadCallback: function onGameFieldLoadCallback() {},\n\n    //TODO hier wird ein Fehler verursacht, wenn Gift NACH einem Switcher kommt!\n    validateMove: function validateMove(dir) {\n\n        if (this.state === GameState.GameOver) {\n            //console.log('Du darfst nicht bewegen, weil du gameOver bist');\n            return false;\n        }\n\n        if (this.player.movestate === PlayerMovementState.Jumping || this.player.movestate === PlayerMovementState.Falling) {\n            //Player already jumping/falling -> neglect input\n            return false;\n        }\n        //var currentfield = this.player.oldDest;\n        //console.log('BlockType: ', this.gamefield.getBlockType(this.gamefield.getJumpField(dir)));\n        //console.log('var destfield = ', destfield);\n\n        // Handle swaped case\n        if (this.player.isSwaped) {\n            dir = -dir;\n        }\n\n        // Handle slowed case\n        if (this.player.isSlowed) {\n            console.log(\"PRESSCOUNT\" + pressCount);\n            pressCount++;\n            if (pressCount < 3) {\n                console.log(\"STILL SLOWED\");\n                return false;\n            } else {\n                console.log(\"RELEASE\" + pressCount);\n                pressCount = 0;\n                this.player.isSlowed = false;\n                //return true;\n            }\n        }\n\n        this.destfield = this.gamefield.getJumpField(dir);\n        //console.log('destfield = ', this.destfield);\n        //console.log('destfield = ', this.destfield.name);\n        //steppedBlock is necessarry for movement-collisioncontroll\n        var steppedBlock = this.destfield.getComponent(this.destfield.name);\n\n        if (steppedBlock.isBlocked) {\n            return false;\n        }\n        this.player.isSwaped = false;\n\n        // !!! INSERT lines at end of file when bugs happen here !!!\n\n        //\n        //Move was correct.\n        //\n        //Change player direction\n        this.player.dir = dir;\n        this.incrementScore(1);\n        this.scoreLabel.string = this.score.toString();\n\n        return true;\n    },\n\n    initalizeInputControl: function initalizeInputControl() {\n\n        var self = this;\n\n        cc.eventManager.addListener({\n            event: cc.EventListener.KEYBOARD,\n\n            onKeyPressed: function onKeyPressed(keyCode, event) {\n                if (self.state == GameState.Paused) return;\n                switch (keyCode) {\n                    case cc.KEY.a:\n                        if (self.state === GameState.Waiting) self.state = GameState.Playing;\n\n                        if (self.validateMove(1)) {\n                            self.player.move(self.destfield, self);\n                            self.gamefield.updatePlayerArrayPos(); // Change array position after jump or bugs will spawn\n                            if (self.player.oldDest !== undefined) {\n                                self.player.oldDest.getComponent(self.player.oldDest.name).playerOnTop = false;\n                            }\n                        }\n                        break;\n                    case cc.KEY.d:\n                        if (self.state === GameState.Waiting) self.state = GameState.Playing;\n\n                        if (self.validateMove(-1)) {\n                            self.player.move(self.destfield, self);\n                            self.gamefield.updatePlayerArrayPos();\n                            if (self.player.oldDest !== undefined) {\n                                self.player.oldDest.getComponent(self.player.oldDest.name).playerOnTop = false;\n                            }\n                        }\n                        break;\n                    case cc.KEY.u:\n                        self.gamefield.updateField(-10);\n                        break;\n                    case cc.KEY.k:\n                        self.player.kill();\n                        break;\n                    case cc.KEY.escape:\n                        cc.log(\"Escape pressed\");\n                        // TODO: what to do on escaped-pressed?\n                        break;\n                    case cc.KEY.f:\n                        self.player.fall();\n                        break;\n                }\n            },\n\n            onKeyReleased: function onKeyReleased(keyCode, event) {\n                switch (keyCode) {\n                    case cc.KEY.a:\n\n                        break;\n                    case cc.KEY.d:\n\n                        break;\n                }\n            }\n        }, self.node);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        //console.log('M: update');\n        if (this.state === GameState.Playing) {\n            this.moveFieldWithPlayer();\n        }\n        if (this.state === GameState.GameOver) {\n            this.storage.setItem('score', this.score);\n            cc.director.loadScene('GameOverScene');\n        }\n    },\n\n    moveFieldWithPlayer: function moveFieldWithPlayer() {\n        var ySpeed = this.player.arrayPosY;\n        // cc.log('Playerpos', ySpeed);\n        if (updateAccess) {\n            //cc.log('UPDATE-Cases betreten');\n            updateAccess = false;\n            switch (ySpeed) {\n                case 8:\n                    updateAccess = this.gamefield.updateField(-0.3);\n                    break;\n                case 7:\n                    updateAccess = this.gamefield.updateField(-0.4);\n                    break;\n                case 6:\n                    updateAccess = this.gamefield.updateField(-1);\n                    break;\n                case 5:\n                    updateAccess = this.gamefield.updateField(-1.5);\n                    break;\n                case 4:\n                    updateAccess = this.gamefield.updateField(-2);\n                    break;\n                case 3:\n                    updateAccess = this.gamefield.updateField(-4);\n                    break;\n                case 2:\n                    updateAccess = this.gamefield.updateField(-8);\n                    break;\n                case 1:\n                    updateAccess = this.gamefield.updateField(-12);\n                    break;\n                case 0:\n                    updateAccess = this.gamefield.updateField(-20);\n                    break;\n                default:\n                    updateAccess = this.gamefield.updateField(-0.3);\n                    break;\n            }\n        }\n    },\n\n    //\n    // HELPING METHODS. SMALL STUFF\n    //\n\n    changeMultiplier: function changeMultiplier(value) {\n        //TODO: Stop and start action by tag\n        this.scoreMultiplier = value;\n        this.multiplierLabel.string = \"Multiplier: \" + this.scoreMultiplier;\n        this.multiplierLabel.node.opacity = 255;\n        var resetMultiplierCallback = cc.callFunc(this.resetMultiplier, this);\n        this.multiplierLabel.node.runAction(cc.sequence(cc.fadeOut(5), resetMultiplierCallback));\n    },\n\n    resetMultiplier: function resetMultiplier() {\n        this.scoreMultiplier = 0;\n    },\n\n    incrementScore: function incrementScore(inc) {\n        this.score += inc * this.scoreMultiplier;\n    },\n\n    //Deprecated\n    checkItemCollision: function checkItemCollision(item) {\n        var itempos = item.node.getPosition();\n        var ppos = this.player.node.getPosition();\n        var dist = cc.pDistance(itempos, ppos);\n        if (dist < item.collectRadius) {\n            item.onPickUpCallback(this.player);\n        }\n    }\n\n});\n/*switch(destfield){\r\n    case 'Grass':\r\n        //console.log('case Grass');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Grass').isBlocked){\r\n            ret = true;\r\n        }\r\n        //steppedBlock is necessarry for Collisioncontroll\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Grass');\r\n        whichStep = Step.Grass;\r\n        break;\r\n    case 'Dirt':\r\n        //console.log('case dirt');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Dirt').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Dirt');\r\n        whichStep = Step.Dirt;\r\n        break;\r\n    case 'Trapdoor':\r\n        //console.log('case Trapdoor');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Trapdoor').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Trapdoor');\r\n        whichStep = Step.Trapdoor;\r\n        break;\r\n    case 'Empty':\r\n        //console.log('case Empty');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Empty').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Empty');\r\n        whichStep = Step.Empty;\r\n        break;\r\n    case 'Water_Border':\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Empty').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Empty');\r\n        whichStep = Step.Empty;\r\n        break;\r\n    case 'Poison':\r\n        //console.log('case Poison');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Poison').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Poison');\r\n        whichStep = Step.Poison;\r\n        break;\r\n    case 'Switcher':\r\n        //console.log('case Switcher');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Switcher').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Switcher');\r\n        whichStep = Step.Switcher;\r\n        break;\r\n    case 'Spike':\r\n        //console.log('case Spike');\r\n        if(!this.gamefield.getJumpField(dir).getComponent('Spike').isBlocked){\r\n            ret = true;\r\n        }\r\n        this.steppedBlock = this.gamefield.getJumpField(dir).getComponent('Spike');\r\n        whichStep = Step.Spike;\r\n        //console.log('steppedBlock auf Spike gesetzt');\r\n        //console.log(this.steppedBlock);\r\n        break;\r\n    default:\r\n        ret = true;\r\n        break;\r\n}*/\n\n/*var destfield = this.gamefield.getJumpField(dir); // Field player wants to jump at\r\n console.log('M: validatemMove');\r\n console.log('BlockType = ', this.gamefield.getBlockType(this.gamefield.getJumpField(dir)));\r\n this.steppedBlock = destfield.getComponent('Block');\r\n if(this.steppedBlock !== null){\r\n if(this.steppedBlock.isBlocked){    // Block is...blocked\r\n return false;\r\n }\r\n }*/\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '65b91llmkxJtJkhqsYzFp71', 'Grass');\n// scripts\\gamefield\\blocks\\Grass.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Grass');\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'a9d5fhMpDRB7rnwgzl0Y19Z', 'Item');\n// scripts\\gameobjects\\Item.js\n\n\nvar ItemType = require('Types').ItemType;\nvar ItemState = require('States').ItemState;\nvar ItemActivityState = require('States').ItemActivityState;\n\nvar riseY = 50;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        itemtype: {\n            'default': ItemType.None,\n            type: ItemType\n        },\n\n        itemstate: {\n            'default': ItemState.Pickable,\n            type: ItemState\n        },\n\n        activitystate: {\n            'default': ItemActivityState.Idle,\n            type: ItemActivityState\n        },\n\n        collectRadius: 0,\n        itemValue: 0, // Value of the item when picked up(pure score, score multiplier)\n        itemTimer: 0,\n\n        activationsound: { // Drag right audio here.\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    destroyItem: function destroyItem() {\n        console.log(\"Itemtype to destroy: \" + this.itemtype.toString());\n        console.log(ItemType[this.itemtype]);\n        switch (this.itemtype) {\n            case ItemType.Slower:\n                break;\n            case ItemType.Antidote:\n            case ItemType.Coin:\n            case ItemType.Star:\n                this.node.destroy();\n                break;\n        }\n    },\n\n    onPickUpCallback: function onPickUpCallback(player, game) {\n        this.itemstate = ItemState.Picked;\n        this.activitystate = ItemActivityState.Active;\n        // Perform the action the item produces(change player or environment)\n        switch (this.itemtype) {\n            case ItemType.Antidote:\n                player.isPoisoned = false;\n                player.poisonTmp = player.poisonTimer; //reset timmer\n                break;\n            case ItemType.Coin:\n                console.log('GAME: ', game.name);\n                game.incrementScore(5);\n                game.scoreLabel.string = game.score.toString();\n                break;\n            case ItemType.Star:\n                player.isPoisoned = false;\n                player.isInvincible = true;\n                break;\n            case ItemType.Slower:\n                console.log(\"SET SWAPED TRUE\");\n                player.isSlowed = true;\n                break;\n        }\n        var pickedCallback = cc.callFunc(this.picked, this);\n        var soundcallback = cc.callFunc(this.playSound, this);\n        // Perform item animation and destroy it\n        this.node.runAction(cc.sequence(cc.spawn(this.assemblePickUpAction(), soundcallback), pickedCallback));\n    },\n\n    assemblePickUpAction: function assemblePickUpAction() {\n        this.activitystate = ItemActivityState.Active;\n        // Rise-Animation for items to show they have been picked up       \n        var risePoint = cc.p(this.node.getPositionX(), this.node.getPositionY() + riseY);\n        var fade = cc.fadeOut(this.getItemAnimationTime()); // Let item fade during animation\n        var anim = null;\n\n        switch (this.itemtype) {\n            case ItemType.Star:\n            case ItemType.Coin:\n            case ItemType.Antidote:\n                anim = cc.moveBy(this.getItemAnimationTime(), risePoint);\n                break;\n        }\n        return cc.spawn(fade, anim);\n    },\n\n    getItemAnimationTime: function getItemAnimationTime(type) {\n        switch (this.itemtype) {\n            case ItemType.Antidote:\n            case ItemType.Coin:\n            case ItemType.Star:\n                return 1.5;\n        }\n    },\n\n    picked: function picked() {\n        this.activitystate = ItemActivityState.Expired;\n        this.destroyItem();\n    },\n\n    playSound: function playSound() {\n        if (this.activationsound !== null) cc.audioEngine.playEffect(this.activationsound, false);\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '7c45etIGUtBC5VbkAJJ2UCT', 'Level');\n// scripts\\gamefield\\Level.js\n\n//Level\nvar L11C = [[7, 1, 1, 6, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 7, 1, 6, 1, 7, 7], [7, 1, 1, 1, 1, 7], [7, 7, 1, 6, 1, 7, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 6, 1, 1, 7], [7, 6, 1, 1, 6, 7]];\n\nvar L11I = [[0, 8, 0, 0, 0, 8, 0], [0, 8, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0], [0, 8, 0, 0, 8, 0], [0, 0, 8, 0, 8, 0, 0], [0, 8, 0, 0, 8, 0], [0, 8, 0, 0, 0, 8, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L12C = [[7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 4, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 3, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n\nvar L12I = [[0, 4, 7, 0, 0, 0, 0], [0, 4, 7, 0, 0, 0], [0, 4, 4, 7, 0, 0, 0], [0, 4, 4, 7, 9, 0], [0, 4, 4, 4, 7, 0, 0], [0, 0, 0, 0, 6, 0], [0, 0, 7, 0, 7, 0, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L13C = [[7, 1, 5, 1, 1, 1, 7], [7, 6, 1, 1, 1, 7], [7, 1, 7, 1, 1, 1, 7], [7, 1, 7, 1, 1, 7], [7, 1, 1, 7, 1, 1, 7], [7, 1, 1, 7, 6, 7], [7, 1, 1, 7, 1, 1, 7], [7, 1, 7, 1, 1, 7]];\n\nvar L13I = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 4, 7, 0, 0], [0, 9, 0, 4, 0, 7, 0], [0, 9, 0, 4, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0]];\n\nvar L21C = [[7, 2, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 7], [7, 7, 2, 2, 2, 7, 7], [7, 6, 6, 6, 6, 7], [7, 2, 2, 2, 2, 2, 7], [7, 2, 2, 2, 2, 7]];\n\nvar L21I = [[0, 7, 0, 7, 4, 7, 0], [0, 7, 3, 0, 7, 0], [0, 7, 0, 7, 3, 7, 0], [0, 9, 7, 7, 9, 0], [0, 0, 9, 4, 9, 0, 0], [0, 0, 0, 0, 0, 0], [0, 9, 7, 6, 7, 9, 0], [0, 9, 9, 9, 9, 0]];\n\nvar L22C = [[7, 4, 4, 7, 4, 4, 7], [7, 4, 7, 7, 2, 7], [7, 7, 2, 7, 4, 7, 7], [7, 4, 7, 7, 4, 7], [7, 7, 4, 7, 2, 7, 7], [7, 4, 7, 7, 4, 7], [7, 7, 2, 7, 4, 7, 7], [7, 4, 7, 7, 4, 7]];\n\nvar L22I = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0], [0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 4, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L23C = [[7, 2, 2, 2, 2, 2, 7], [7, 5, 5, 5, 5, 7], [7, 3, 2, 2, 2, 3, 7], [7, 3, 2, 2, 3, 7], [7, 3, 3, 2, 2, 2, 7], [7, 3, 2, 3, 2, 7], [7, 3, 2, 3, 3, 2, 7], [7, 2, 2, 3, 2, 7]];\n\nvar L23I = [[0, 9, 9, 6, 9, 9, 0], [0, 0, 0, 0, 0, 0], [0, 0, 9, 3, 9, 0, 0], [0, 0, 0, 3, 0, 0], [0, 0, 0, 9, 3, 0, 0], [0, 0, 2, 0, 3, 0], [0, 0, 0, 0, 0, 3, 0], [0, 0, 0, 0, 0, 0]];\n\nvar L31C = [[7, 3, 5, 3, 5, 3, 7], [7, 4, 3, 3, 4, 7], [7, 3, 6, 3, 6, 3, 7], [7, 3, 4, 4, 3, 7], [7, 3, 3, 6, 3, 3, 7], [7, 3, 2, 4, 3, 7], [7, 3, 4, 3, 6, 3, 7], [7, 3, 2, 3, 2, 7]];\n\nvar L31I = [[0, 4, 0, 4, 0, 0, 0], [0, 0, 4, 4, 0, 0], [0, 4, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0], [0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 4, 0, 0, 3, 0]];\n\nvar L32C = [[7, 7, 2, 7, 2, 7, 7], [7, 6, 7, 7, 6, 7], [7, 7, 4, 3, 4, 7, 7], [7, 5, 6, 6, 5, 7], [7, 6, 7, 2, 7, 6, 7], [7, 4, 7, 6, 4, 7], [7, 7, 2, 7, 2, 7, 7], [7, 3, 2, 7, 2, 7]];\n\nvar L32I = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 4, 9, 0, 0, 0, 0], [0, 2, 1, 0, 1, 0]];\n\nvar L33C = [[7, 1, 6, 1, 6, 1, 7], [7, 1, 3, 1, 3, 7], [7, 6, 1, 6, 1, 6, 7], [7, 1, 4, 4, 1, 7], [7, 5, 3, 6, 3, 5, 7], [7, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 1, 7], [7, 1, 1, 1, 1, 7]];\n\nvar L33I = [[0, 0, 3, 0, 4, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 4, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 9, 9, 9, 9, 0], [0, 9, 9, 9, 9, 9, 0], [0, 0, 1, 2, 0, 0]];\n\nmodule.exports = {\n    L11C: L11C,\n    L11I: L11I,\n    L12C: L12C,\n    L12I: L12I,\n    L13C: L13C,\n    L13I: L13I,\n    L21C: L21C,\n    L21I: L21I,\n    L22C: L22C,\n    L22I: L22I,\n    L23C: L23C,\n    L23I: L23I,\n    L31C: L31C,\n    L31I: L31I,\n    L32C: L32C,\n    L32I: L32I,\n    L33C: L33C,\n    L33I: L33I\n};\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '10915ky+jBFrIsAE/lnyWqN', 'MenuButtonCallbacks');\n// scripts\\scenescripts\\MenuButtonCallbacks.js\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n\n        buttonAudio: {\n            'default': null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    startControlCallback: function startControlCallback() {\n        var onLaunched = function onLaunched() {\n            //use this for callbacks on loading\n            console.log('Scene launched');\n        };\n        cc.director.loadScene('GameScene', onLaunched);\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    aboutControlCallback: function aboutControlCallback() {\n        cc.director.loadScene('About');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    tutorialControlCallback: function tutorialControlCallback() {\n        cc.director.loadScene('Tutorial');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    quitControlCallback: function quitControlCallback() {\n        //cc.director.end(); //TODO: how to end the game?\n        cc.log(\"Quit pressed.\");\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    },\n\n    backControlCallback: function backControlCallback() {\n        cc.director.loadScene('Startmenu');\n        cc.audioEngine.playEffect(this.buttonAudio, false);\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'dfcfezAAcJAALXPiIHVJj2d', 'Player');\n// scripts\\gameobjects\\Player.js\n\nvar GameState = require('States').GameState;\nvar PlayerMovementState = require('States').PlayerMovementState;\nvar PlayerState = require('States').PlayerState;\n\nvar explodetime = 0.2;\nvar riseDeathY = 25;\n\nvar animationNeedsUpdate = false;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        // Player spawns in a standing state\n        movestate: {\n            'default': PlayerMovementState.Standing,\n            type: PlayerMovementState\n        },\n\n        isInvincible: false, // Player picked up an item which made him unkillable\n        isPoisoned: false,\n        isAlive: false,\n        isSwaped: false, //Player stands on a Switcher //TODO: nutzlos da nie verwendet in player\n        isSlowed: false,\n\n        poisonTimer: 0,\n        invincibiltyTimer: 0,\n\n        dir: 0, // Next Position player is jumping to 1 : left  -1: right\n\n        arrayPosX: 0, //Position in the array given with row and column\n        arrayPosY: 0,\n\n        jumpTime: 0, // Time for jumping action to run\n        fallTime: 0, // same: falling\n\n        // Atlas holdin all sprites of the player.\n        playeratlas: {\n            'default': null,\n            type: cc.SpriteAtlas\n        },\n\n        // Player Audios\n        jumpAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        deathAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        fallAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        drinkAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        poisonedAudio: {\n            'default': null,\n            url: cc.AudioClip\n        },\n\n        // Game reference to pass player\n        game: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        //register player at game for processing player logic\n        this.game.getComponent('Game').player = this;\n\n        //Init timers\n        this.poisonTmp = this.poisonTimer;\n        this.invincibiltyTmp = this.invincibiltyTimer; //Henri fragen ob man properties speichern kann\n\n        this.movestate = PlayerMovementState.Standing;\n        this.isMoving = false;\n        this.isAlive = true;\n        //this.oldDest = this.game.getComponent('Game').gamefield.gameField[gameField.length-1][3];\n\n        this.offsetY = this.node.getContentSize().height / 2; // Offset to set the player on top of blocks\n        this.destinationpos = cc.p(0, 0);\n\n        //Load data relevant to player   -- !! LEAVE AT END OF THIS FUNCTION !! --\n        this.game.getComponent('Game').onPlayerLoadCallback();\n    },\n\n    kill: function kill() {\n        this.isInvincible = false;\n        this.isAlive = false;\n        var gamestatecallback = cc.callFunc(this.changeGameState, this);\n        var soundcallback = cc.callFunc(this.playSound, this);\n        this.node.runAction(cc.sequence(cc.spawn(this.deform(), this.assembleAction()), gamestatecallback, soundcallback));\n        cc.audioEngine.stopAllEffects(); //TODO evtl als callback\n    },\n\n    fall: function fall() {\n        this.isInvincible = false;\n        this.movestate = PlayerMovementState.Falling;\n        //var gamestatecallback = cc.callFunc(this.changeGameFallState,this);\n        var killcallback = cc.callFunc(this.kill, this);\n        var soundcallback = cc.callFunc(this.playSound, this);\n        this.node.runAction(cc.sequence(cc.spawn(this.deform(), this.assembleAction()), soundcallback, killcallback));\n        this.isAlive = false; //set here because alive impacts death anim.\n        cc.audioEngine.stopAllEffects();\n    },\n\n    changeGameState: function changeGameState() {\n        if (!this.isAlive) this.game.getComponent('Game').state = GameState.GameOver;\n    },\n    changeGameFallState: function changeGameFallState() {\n        console.log(\"Alive: \" + this.isAlive);\n        if (this.isAlive) this.isAlive = false;\n        console.log('Change GameState: ', this.game.getComponent('Game').state);\n        this.game.getComponent('Game').state = GameState.GameOver;\n        console.log(this.game.getComponent('Game').state);\n    },\n\n    changePlayerState: function changePlayerState() {\n        switch (this.movestate) {\n            case PlayerMovementState.Jumping:\n                this.movestate = PlayerMovementState.Standing;\n                break;\n        }\n    },\n\n    blockStepped: function blockStepped(player, game) {\n        this.gAme = game;\n        var steppedBlock = this.destfield.getComponent(this.destfield.name);\n        console.log('STEPPED BLOCK: ', steppedBlock);\n        console.log(this.destfield.name);\n        steppedBlock.onStepCallback(this, game);\n        var item = steppedBlock.getComponentInChildren('Item');\n        if (item !== null) item.onPickUpCallback(this, this.gAme);\n    },\n    //\n    // Movement and Actions\n    //\n\n    //Called everytime a the figure is moved by pressing A or D\n    move: function move(destfield, game) {\n        if (this.isAlive === false) return;\n        this.oldDest = this.destfield;\n        this.destfield = destfield; // Direction players wants to move the figure(-1 or 1)\n        switch (this.movestate) {\n            case PlayerMovementState.Standing:\n                this.movestate = PlayerMovementState.Jumping;\n\n                var soundCallback = cc.callFunc(this.playSound, this);\n                var playerstateCallback = cc.callFunc(this.changePlayerState, this);\n                var blockstepCallback = cc.callFunc(this.blockStepped, this, game);\n                this.switchPlayerAppearance();\n                this.setDestinationPos();\n\n                this.node.runAction(cc.sequence(cc.spawn(this.deform(), this.assembleAction()), blockstepCallback, soundCallback, playerstateCallback));\n                break;\n\n            case PlayerMovementState.Jumping:\n            case PlayerMovementState.Falling:\n                return;\n        }\n    },\n\n    setDestinationPos: function setDestinationPos() {\n        this.destinationpos.x = this.destfield.getPositionX();\n        this.destinationpos.y = this.destfield.getPositionY() + this.offsetY;\n    },\n\n    switchPlayerAppearance: function switchPlayerAppearance() {\n        this.updated = this.updateAnimation();\n        if (this.updated) // if animations is running dont go to sprite frame changing\n            return;\n        if (this.dir < 0) {\n            // Player looks left\n            this.getComponent(cc.Sprite).spriteFrame = this.playeratlas.getSpriteFrame(\"player_left\");\n        } else {\n            this.getComponent(cc.Sprite).spriteFrame = this.playeratlas.getSpriteFrame(\"player_right\");\n        }\n    },\n\n    assembleAction: function assembleAction() {\n        if (this.isAlive === false) //Player dead -> action TODO: versaut fallen animation\n            return cc.moveBy(explodetime, cc.p(0, riseDeathY));\n\n        switch (this.movestate) {\n            case PlayerMovementState.Standing:\n                break;\n            case PlayerMovementState.Falling:\n                return cc.moveTo(this.fallTime, cc.p(this.node.getPosition().x, 0)).easing(cc.easeCubicActionIn());\n\n            case PlayerMovementState.Jumping:\n                // Points forming the beziercurve\n                var bezier = [this.node.getPosition(), this.destinationpos, this.destinationpos];\n                return cc.bezierTo(this.jumpTime, bezier);\n        }\n    },\n\n    deform: function deform() {\n        if (this.isAlive === false) //Player dead -> deform\n            return cc.sequence(cc.scaleTo(explodetime, 1.3, 1.3), cc.scaleTo(explodetime, 0.0, 0.0));\n\n        switch (this.movestate) {// Player in a moving state -> action\n\n            case PlayerMovementState.Jumping:\n                var scaletime = this.jumpTime * 0.5;\n                return cc.sequence(cc.scaleTo(scaletime, 1, 1.1), cc.scaleTo(scaletime, 1, 0.9), cc.scaleTo(scaletime, 1, 1.0));\n\n            case PlayerMovementState.Falling:\n                this.node.setLocalZOrder(this.destfield.getLocalZOrder()); //TODO: fall wird schon während des jumps ausgeführt -> spieler verschwindet hinter vorbeigesprungenen blöcken\n                var fallDeform = cc.scaleTo(this.fallTime, 0.85, 0.85);\n                var fallfade = cc.fadeOut(this.fallTime * 4);\n                return cc.spawn(fallDeform, fallfade.easing(cc.easeCubicActionOut()));\n        }\n        // Might be useful sometime\n        if (this.isPoisoned) return null;\n\n        if (this.isInvincible) return null;\n    },\n\n    //\n    //  Sounds\n    //\n\n    playSound: function playSound() {\n        if (!this.isAlive) {\n            cc.audioEngine.playEffect(this.deathAudio, false);\n            return;\n        }\n\n        if (this.isPoisoned) cc.audioEngine.playEffect(this.poisonedAudio, false);\n\n        switch (this.movestate) {\n            case PlayerMovementState.Jumping:\n                cc.audioEngine.playEffect(this.jumpAudio, false);\n                break;\n            case PlayerMovementState.Falling:\n                cc.audioEngine.playEffect(this.fallAudio, false);\n                break;\n\n        }\n    },\n\n    //\n    // Status and Update of player\n    //\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.isAlive) {\n            this.updateTimers(dt);\n            //this.updateAnimation();\n        }\n    },\n\n    updateAnimation: function updateAnimation() {\n        if (!this.animation) // Init animation\n            this.animation = this.getComponent(cc.Animation);\n        if (!this.isPoisoned && !this.isInvincible) {\n            //NICE TO HAVE: no bools\n            this.animation.stop();\n            return false;\n        }\n\n        if (this.isPoisoned || this.isInvincible) this.animation.play(this.getAnimation());\n        return true;\n    },\n\n    updateTimers: function updateTimers(dt) {\n        if (this.isPoisoned) if (this.poisonTmp <= 0) {\n            //timer ran out -> kill player\n            this.isPoisoned = false;\n            this.isAlive = false;\n            this.kill();\n        } else {\n            this.poisonTmp -= dt; //decrease timer...hurry!\n        }\n\n        if (this.isInvincible) if (this.invincibiltyTmp <= 0) {\n            //timer ran out -> downrank player\n            this.isInvincible = false;\n            this.invincibiltyTmp = this.invincibiltyTimer;\n        } else {\n            this.invincibiltyTmp -= dt; //decrease timer...hurry!\n        }\n    },\n\n    isMoving: function isMoving() {\n        switch (this.movestate) {//switch for possible further states\n            case PlayerMovementState.Jumping:\n                this.isMoving = true;\n                return true;\n\n            case PlayerMovementState.Standing:\n                return false;\n        }\n    },\n\n    isAlive: (function (_isAlive) {\n        function isAlive() {\n            return _isAlive.apply(this, arguments);\n        }\n\n        isAlive.toString = function () {\n            return _isAlive.toString();\n        };\n\n        return isAlive;\n    })(function () {\n        return isAlive;\n    }),\n\n    getAnimation: function getAnimation() {\n        if (this.dir < 0) {\n            if (this.isPoisoned) {\n                return 'poison_left_anim'; //play('poison_left_anim');\n            }\n\n            if (this.isInvincible) {\n                return 'star_left_anim'; //play('poison_left_anim');\n            }\n        } else {\n                if (this.isPoisoned) {\n                    return 'poison_right_anim'; //play('poison_left_anim');\n                }\n\n                if (this.isInvincible) {\n                    return 'star_right_anim'; //play('poison_left_anim');\n                }\n            }\n    }\n\n});\n/*\r\nmakeInvincible: function(){\r\n    this.isInvincible = true;\r\n    //TODO: start invincibility timer\r\n},\r\n  poison: function(){\r\n    this.isPoisoned = true;\r\n    //TODO: start poison timer and killing phase if turn based poison is neglected\r\n},\r\n  shot : function(){\r\n  },*/\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'e050ffZnUVAjKB8fySd+ZdO', 'Poison');\n// scripts\\gamefield\\blocks\\Poison.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Poison');\n        console.log('DU WURDEST VERGIFTET');\n        /*if(player.poisonTimer<6 || player.poisonTimer>6){\r\n            console.log('Der Timer ist kleiner 6');\r\n            if(!player.isPoisoned){\r\n                console.log('Der Spieler ist noch nicht vergiftet');\r\n                player.poisonTimer = 0;\r\n            }\r\n        }*/\n\n        if (!player.isInvincible) player.isPoisoned = true;\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'e22c3Q4gXBNCp5WTGCtGqSz', 'Spike');\n// scripts\\gamefield\\blocks\\Spike.js\n\nvar alreadyKilled = false;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isDeadly: true\n    },\n\n    // foo: {\n    //    default: null,      // The default value will be used only when the component attaching\n    //                           to a node for the first time\n    //    url: cc.Texture2D,  // optional, default is typeof default\n    //    serializable: true, // optional, default is true\n    //    visible: true,      // optional, default is true\n    //    displayName: 'Foo', // optional\n    //    readonly: false,    // optional, default is false\n    // },\n    // ...\n    switchDeadly: function switchDeadly() {\n        //console.log('isDeadly: ', this.isDeadly);\n        this.isDeadly = !this.isDeadly;\n        this.hasKilled = false;\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.isDeadly = true;\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        this.player = player;\n        this.playerOnTop = true;\n        console.log('M: Onstep Spike');\n        console.log('OnS isDeadly: ', this.isDeadly);\n        if (!this.hasKilled) this.performSpikeKill();\n    },\n\n    performSpikeKill: function performSpikeKill() {\n        if (!this.isDeadly && !this.player.isInvincible) {\n            console.log('Uups, das war tötlich');\n            if (!alreadyKilled) {\n                this.player.kill();\n                alreadyKilled = true;\n            }\n            this.hasKilled = true;\n        } else {\n            console.log('Glück gehabt');\n        }\n    },\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.playerOnTop) this.performSpikeKill();\n    }\n});\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, 'f8af3m3LglPNY34Ddb9VWD0', 'States');\n// scripts\\enums\\States.js\n\nvar GameState = cc.Enum({\n    None: 999,\n    Idle: -1, // Waiting for Player to choose something in the menu\n    Loading: -1, // Player pressed Start -> load game\n    Waiting: -1, // Waiting for first move to start timers etc\n    Playing: -1, // Game loaded and started\n    GameOver: -1, //Player died\n    Paused: -1, // Game was paused by the player\n    Resumed: -1, // Game was resumed after pausing\n    Ended: -1 });\n\n// Game was closed by the player or he lost -> back to idle?\nvar PlayerMovementState = cc.Enum({\n    Standing: -1, //Player is standing still (has fully arrived on a block)\n    Jumping: -1, //Player is moving onto another block(in animation)\n    Falling: -1 });\n\n//Player is falling down the gamefield\nvar ItemState = cc.Enum({\n    Pickable: -1,\n    Blocked: -1,\n    Picked: -1\n});\n\nvar ItemActivityState = cc.Enum({\n    Idle: -1,\n    Active: -1,\n    Expired: -1\n});\n\nvar PlayerState = cc.Enum({\n    Alive: -1,\n    Dead: -1,\n    Poisoned: -1,\n    Invincible: -1\n});\n\nmodule.exports = {\n    GameState: GameState,\n    PlayerMovementState: PlayerMovementState,\n    ItemState: ItemState,\n    PlayerState: PlayerState,\n    ItemActivityState: ItemActivityState\n};\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '4323d4XJ4ZMiZ2wx+yx7E7n', 'Switcher');\n// scripts\\gamefield\\blocks\\Switcher.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        cc.log('M: onStepCallback Switcher');\n        player.isSwaped = true;\n    },\n\n    collide: function collide() {}\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '1c710YvWvBAcqTBB0WMuN9v', 'Trapdoor');\n// scripts\\gamefield\\blocks\\Trapdoor.js\n\nvar BlockType = require('Types').BlockType;\nvar PlayerMovementState = require('States').PlayerMovementState;\n\ncc.Class({\n    'extends': cc.Component,\n\n    properties: {\n        isBlocked: false,\n        hasItem: false,\n\n        blocktype: {\n            'default': BlockType.None,\n            type: BlockType\n        },\n\n        item: {\n            'default': null,\n            type: cc.Node\n        }\n\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    },\n\n    onStepCallback: function onStepCallback(player, game) {\n        var animCtrl = this.node.getComponent(cc.Animation);\n        animCtrl.play('trapdoor');\n        var fall = cc.moveTo(1, cc.p(this.node.getPositionX(), this.node.getPositionY() - 100));\n        //var calLback = cc.callFunc(this.destroy, this);\n        //this.node.runAction(cc.sequence(fall,calLback));\n        this.node.runAction(fall);\n        player.fall();\n        //game.state = game.GameState.GameOver;\n    },\n\n    collide: function collide() {},\n\n    destroy: function destroy() {\n        this.node.destroy();\n    }\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '71b93SRN0BO1qKSq55EU/WI', 'Types');\n// scripts\\enums\\Types.js\n\nvar ItemType = cc.Enum({\n    None: 999,\n    Star: -1, // Score\n    Coin: -1, // Climb two(f.e.) rows up\n    Antidote: -1, // Cures poison\n    Blocker: -1,\n    Slower: -1\n});\n\nvar BlockType = cc.Enum({\n    None: -1,\n    Empty: -1,\n    Dirt: -1,\n    Grass: -1,\n    Poison: -1,\n    Switcher: -1,\n    Trapdoor: -1,\n    Spike: -1\n});\n\nmodule.exports = {\n    ItemType: ItemType,\n    BlockType: BlockType\n};\n\ncc._RFpop();","\"use strict\";\ncc._RFpush(module, '96e20B9zFpCUKKVUnxPN/H9', 'WaterRight');\n// scripts\\gamefield\\blocks\\WaterRight.js\n\ncc.Class({\n    \"extends\": cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.playerOnTop = false;\n    }\n\n});\n// called every frame, uncomment this function to activate update callback\n// update: function (dt) {\n\n// },\n\ncc._RFpop();"],"sourceRoot":"/source/"}